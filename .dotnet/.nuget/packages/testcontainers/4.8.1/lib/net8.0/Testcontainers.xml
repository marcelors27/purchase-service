<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Testcontainers</name>
    </assembly>
    <members>
        <member name="T:DotNet.Testcontainers.Builders.AbstractBuilder`4">
            <summary>
            An abstract fluent Docker resource builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
            <typeparam name="TResourceEntity">The resource entity.</typeparam>
            <typeparam name="TCreateResourceEntity">The underlying Docker.DotNet resource entity.</typeparam>
            <typeparam name="TConfigurationEntity">The configuration entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.#ctor(`3)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.AbstractBuilder`4" /> class.
            </summary>
            <param name="dockerResourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.AbstractBuilder`4.DockerResourceConfiguration">
            <summary>
            Gets the Docker resource configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithDockerEndpoint(System.String)">
            <summary>
            Sets the Docker API endpoint.
            </summary>
            <remarks>
            Testcontainers automatically discovers the Docker environment and applies the configuration.
            It is recommended to use the auto discovery. Only certain edge cases require this enhanced API.
            </remarks>
            <param name="endpoint">The Docker API endpoint.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithDockerEndpoint(System.Uri)">
            <summary>
            Sets the Docker API endpoint.
            </summary>
            <remarks>
            Testcontainers automatically discovers the Docker environment and applies the configuration.
            It is recommended to use the auto discovery. Only certain edge cases require this enhanced API.
            </remarks>
            <param name="endpoint">The Docker API endpoint.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithDockerEndpoint(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration)">
            <summary>
            Sets the Docker API endpoint.
            </summary>
            <remarks>
            Testcontainers automatically discovers the Docker environment and applies the configuration.
            It is recommended to use the auto discovery. Only certain edge cases require this enhanced API.
            </remarks>
            <param name="dockerEndpointAuthConfig">The Docker endpoint authentication configuration.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithCleanUp(System.Boolean)">
            <summary>
            Cleans up the Docker resource after the tests are finished.
            </summary>
            <param name="cleanUp">Determines whether the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> removes the Docker resource after the tests are finished or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithReuse(System.Boolean)">
            <summary>
             Reuses an existing Docker resource.
             </summary>
             <remarks>
             If reuse is enabled, Testcontainers will label the resource with a hash value
             according to the respective build/resource configuration. When Testcontainers finds a
             matching resource, it will reuse this resource instead of creating a new one. Enabling
             reuse will disable the resource reaper, meaning the resource will not be cleaned up
             after the tests are finished.
            
             This is an <b>experimental</b> feature. Reuse does not take all builder
             configurations into account when calculating the hash value. There might be configurations
             where Testcontainers is not, or not yet, able to find a matching resource and
             recreate the resource.
             </remarks>
             <param name="reuse">Determines whether to reuse an existing resource configuration or not.</param>
             <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithLabel(System.String,System.String)">
            <summary>
            Adds user-defined metadata to the Docker resource.
            </summary>
            <param name="name">The label name.</param>
            <param name="value">The label value.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithLabel(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Adds user-defined metadata to the Docker resource.
            </summary>
            <param name="labels">A dictionary of environment variables.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithCreateParameterModifier(System.Action{`2})">
            <summary>
            Allows low level modifications of the Docker.DotNet entity after the builder configuration has been applied. Multiple low level modifications will be executed in order of insertion.
            </summary>
            <remarks>
            This API is intended for special use cases only. We do not recommend using it and cannot maintain backwards compatibility.
            </remarks>
            <param name="parameterModifier">The action that invokes modifying the Docker.DotNet entity instance.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Sets the logger.
            </summary>
            <param name="logger">The logger.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.Build">
            <summary>
            Builds an instance of <typeparamref name="TResourceEntity" /> with the given resource configuration.
            </summary>
            <returns>A configured instance of <typeparamref name="TResourceEntity" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.WithResourceReaperSessionId(System.Guid)">
            <summary>
            Sets the Resource Reaper session id.
            </summary>
            <param name="resourceReaperSessionId">The <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> session id.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.Init">
            <summary>
            Initializes the fluent Docker resource builder.
            </summary>
            <remarks>
            Due to the immutable design decision the configuration cannot be kept during the object instantiation.
            To keep the configuration override <see cref="P:DotNet.Testcontainers.Builders.AbstractBuilder`4.DockerResourceConfiguration" />.
            </remarks>
            <example>
              <code>
              public sealed class CustomBuilder : AbstractBuilder&lt;CustomBuilder, IContainer, IContainerConfiguration&gt;
              {
                public CustomBuilder() : base(new ContainerConfiguration())
                {
                  this.DockerResourceConfiguration = this.Init().DockerResourceConfiguration;
                }
              <br />
                protected override IContainerConfiguration DockerResourceConfiguration { get; }
              <br />
                protected override CustomBuilder Init()
                {
                  return base.Init().WithLabel("custom.builder", bool.TrueString.ToLowerInvariant());
                }
              }
              </code>
            </example>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.Validate">
            <summary>
            Validates the Docker resource configuration.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.Clone(DotNet.Testcontainers.Configurations.IResourceConfiguration{`2})">
            <summary>
            Clones the Docker resource builder configuration.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.AbstractBuilder`4.Merge(`3,`3)">
            <summary>
            Merges the Docker resource builder configuration.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.BuildConfiguration">
            <summary>
            Provides static utility methods for combining old and new configuration values
            across various collection and value types.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.BuildConfiguration.Combine``1(``0,``0)">
            <summary>
            Returns the updated configuration value. If the new value is <c>null</c> or
            <c>default</c>, the old value is returned.
            </summary>
            <param name="oldValue">The old configuration value.</param>
            <param name="newValue">The new configuration value.</param>
            <typeparam name="T">Any class.</typeparam>
            <returns>The updated value, or the old value if unchanged.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.BuildConfiguration.Combine``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Combines all existing and new configuration changes. If there are no changes,
            the previous configurations are returned.
            </summary>
            <param name="oldValue">The old configuration.</param>
            <param name="newValue">The new configuration.</param>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <returns>An updated configuration.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.BuildConfiguration.Combine``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Combines all existing and new configuration changes while preserving the
            order of insertion. If there are no changes, the previous configurations
            are returned.
            </summary>
            <param name="oldValue">The old configuration.</param>
            <param name="newValue">The new configuration.</param>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <returns>An updated configuration.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.BuildConfiguration.Combine``1(DotNet.Testcontainers.Configurations.ComposableEnumerable{``0},DotNet.Testcontainers.Configurations.ComposableEnumerable{``0})">
            <summary>
            Combines all existing and new configuration changes. If there are no changes,
            the previous configuration is returned.
            </summary>
            <remarks>
            Uses <see cref="M:DotNet.Testcontainers.Configurations.ComposableEnumerable`1.Compose(System.Collections.Generic.IEnumerable{`0})" /> on <paramref name="newValue" />
            to combine configurations. The existing <paramref name="oldValue" /> is passed as
            an argument to that method.
            </remarks>
            <param name="oldValue">The old configuration.</param>
            <param name="newValue">The new configuration.</param>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <returns>An updated configuration.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.BuildConfiguration.Combine``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
            Combines all existing and new configuration changes. If there are no changes,
            the previous configurations are returned.
            </summary>
            <param name="oldValue">The old configuration.</param>
            <param name="newValue">The new configuration.</param>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
            <returns>An updated configuration.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.CommonDirectoryPath">
            <summary>
            Resolves common directory paths.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CommonDirectoryPath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.CommonDirectoryPath" /> struct.
            </summary>
            <param name="directoryPath">The directory path.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.CommonDirectoryPath.DirectoryPath">
            <summary>
            Gets the directory path.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CommonDirectoryPath.GetBinDirectory">
            <summary>
            Resolves the first bin directory upwards the directory tree.
            </summary>
            <returns>The first bin directory upwards the directory tree.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the bin directory was not found upwards the directory tree.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CommonDirectoryPath.GetGitDirectory(System.String)">
            <summary>
            Resolves the first Git directory upwards the directory tree.
            </summary>
            <remarks>
            Start node is the caller file path directory. End node is the root directory.
            </remarks>
            <param name="filePath">The caller file path.</param>
            <returns>The first Git directory upwards the directory tree.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the Git directory was not found upwards the directory tree.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CommonDirectoryPath.GetSolutionDirectory(System.String)">
            <summary>
            Resolves the first Visual Studio solution file upwards the directory tree.
            </summary>
            <remarks>
            Start node is the caller file path directory. End node is the root directory.
            </remarks>
            <param name="filePath">The caller file path.</param>
            <returns>The first Visual Studio solution file upwards the directory tree.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when the Visual Studio solution file was not found upwards the directory tree.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CommonDirectoryPath.GetProjectDirectory(System.String)">
            <summary>
            Resolves the first CSharp, FSharp or Visual Basic project file upwards the directory tree.
            </summary>
            <remarks>
            Start node is the caller file path directory. End node is the root directory.
            </remarks>
            <param name="filePath">The caller file path.</param>
            <returns>The first CSharp, FSharp or Visual Basic project file upwards the directory tree.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when no CSharp, FSharp or Visual Basic project file was found upwards the directory tree.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.CommonDirectoryPath.GetCallerFileDirectory(System.String)">
            <summary>
            Resolves the caller file path directory.
            </summary>
            <param name="filePath">The caller file path.</param>
            <returns>The caller file path directory.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.Consume">
            <summary>
            Collection of pre-configured output consumers.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Consume.DoNotConsumeStdoutAndStderr">
            <summary>
            Does not consume the output of the Testcontainer.
            </summary>
            <returns>A output consumer.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Consume.RedirectStdoutAndStderrToConsole">
            <summary>
            Redirects the output of the Testcontainer to <see cref="T:System.Console" />.
            </summary>
            <returns>A output consumer.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Consume.RedirectStdoutAndStderrToStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Redirects the output of the Testcontainer to the given streams..
            </summary>
            <param name="stdout">Receives Stdout.</param>
            <param name="stderr">Receives Stderr.</param>
            <returns>A output consumer.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.ContainerBuilder">
            <summary>
            A fluent Docker container builder.
            </summary>
            <remarks>
            The container builder configuration requires at least the <see cref="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithImage(System.String)" /> configuration.
            </remarks>
            <example>
              The default configuration is equivalent to:
              <code>
              _ = new ContainerBuilder()
                .WithDockerEndpoint(TestcontainersSettings.OS.DockerEndpointAuthConfig)
                .WithLabel(DefaultLabels.Instance)
                .WithCleanUp(true)
                .WithImagePullPolicy(PullPolicy.Missing)
                .WithOutputConsumer(Consume.DoNotConsumeStdoutAndStderr())
                .WithWaitStrategy(Wait.ForUnixContainer())
                .WithStartupCallback((_, ct) =&gt; Task.CompletedTask)
                .Build();
              </code>
            </example>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.#ctor(DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder" /> class.
            </summary>
            <param name="dockerResourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.ContainerBuilder.DockerResourceConfiguration">
            <summary>
            Gets the Docker resource configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.Build">
            <summary>
            Builds an instance of <see cref="T:DotNet.Testcontainers.Containers.IContainer" /> with the given resource configuration.
            </summary>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Containers.IContainer" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.Init">
            <summary>
            Initializes the fluent Docker resource builder.
            </summary>
            <remarks>
            Due to the immutable design decision the configuration cannot be kept during the object instantiation.
            To keep the configuration override <see cref="P:DotNet.Testcontainers.Builders.AbstractBuilder`4.DockerResourceConfiguration" />.
            </remarks>
            <example>
              <code>
              public sealed class CustomBuilder : AbstractBuilder&lt;CustomBuilder, IContainer, IContainerConfiguration&gt;
              {
                public CustomBuilder() : base(new ContainerConfiguration())
                {
                  this.DockerResourceConfiguration = this.Init().DockerResourceConfiguration;
                }
              <br />
                protected override IContainerConfiguration DockerResourceConfiguration { get; }
              <br />
                protected override CustomBuilder Init()
                {
                  return base.Init().WithLabel("custom.builder", bool.TrueString.ToLowerInvariant());
                }
              }
              </code>
            </example>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.Clone(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.CreateContainerParameters})">
            <summary>
            Clones the Docker resource builder configuration.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.Clone(DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Clones the Docker resource builder configuration.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder.Merge(DotNet.Testcontainers.Configurations.IContainerConfiguration,DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Merges the Docker resource builder configuration.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.ContainerBuilder`3">
            <summary>
            An abstract fluent Docker container builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
            <typeparam name="TContainerEntity">The resource entity.</typeparam>
            <typeparam name="TConfigurationEntity">The configuration entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.#ctor(`2)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ContainerBuilder`3" /> class.
            </summary>
            <param name="dockerResourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.ContainerBuilder`3.AcceptLicenseAgreementEnvVar">
            <summary>
            Gets the name of the environment variable that must be set to accept the image license agreement.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.ContainerBuilder`3.AcceptLicenseAgreement">
            <summary>
            Gets the expected value of <see cref="P:DotNet.Testcontainers.Builders.ContainerBuilder`3.AcceptLicenseAgreementEnvVar" /> that indicates acceptance of the license agreement.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.ContainerBuilder`3.DeclineLicenseAgreement">
            <summary>
            Gets the expected value of <see cref="P:DotNet.Testcontainers.Builders.ContainerBuilder`3.AcceptLicenseAgreementEnvVar" /> that indicates rejection of the license agreement.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithAcceptLicenseAgreement(System.Boolean)">
            <summary>
            Accepts the license agreement.
            </summary>
            <remarks>
            Modules that require a license agreement must override and implement this
            method to enforce proper license acceptance behavior.
            </remarks>
            <param name="acceptLicenseAgreement">A boolean value indicating whether the license agreement is accepted.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the module does not require a license agreement.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.DependsOn(DotNet.Testcontainers.Containers.IContainer)">
            <summary>
            Sets the dependent container to resolve and start before starting this container configuration.
            </summary>
            <param name="container">The dependent container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.DependsOn(DotNet.Testcontainers.Networks.INetwork)">
            <summary>
            Sets the dependent network to resolve and create before starting this container configuration.
            </summary>
            <param name="network">The dependent network.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.DependsOn(DotNet.Testcontainers.Volumes.IVolume,System.String)">
            <summary>
            Sets the dependent volume to resolve and create before starting this container configuration.
            </summary>
            <param name="volume">The dependent volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.DependsOn(DotNet.Testcontainers.Volumes.IVolume,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Sets the dependent volume to resolve and create before starting this container configuration.
            </summary>
            <param name="volume">The dependent volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithImage(System.String)">
            <summary>
            Sets an image for which to create the container.
            </summary>
            <param name="image">The image.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithImage(DotNet.Testcontainers.Images.IImage)">
            <summary>
            Sets an image for which to create the container.
            </summary>
            <param name="image">The image.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithImagePullPolicy(System.Func{Docker.DotNet.Models.ImageInspectResponse,System.Boolean})">
            <summary>
            Sets the image pull policy.
            </summary>
            <param name="imagePullPolicy">The image pull policy.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithHostname(System.String)">
            <summary>
            Sets the hostname.
            </summary>
            <param name="hostname">The hostname.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithMacAddress(System.String)">
            <summary>
            Sets the MAC address.
            </summary>
            <param name="macAddress">The MAC address.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithWorkingDirectory(System.String)">
            <summary>
            Sets the working directory.
            </summary>
            <param name="workingDirectory">The working directory.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithEntrypoint(System.String[])">
            <summary>
            Overrides the container's entrypoint executable.
            </summary>
            <param name="entrypoint">The entrypoint executable.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithCommand(System.String[])">
            <summary>
            Overrides the container's command arguments.
            </summary>
            <param name="command">A list of commands, "executable", "param1", "param2" or "param1", "param2".</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithCommand(DotNet.Testcontainers.Configurations.ComposableEnumerable{System.String})">
            <summary>
            Overrides the container's command arguments.
            </summary>
            <remarks>
            The <see cref="T:DotNet.Testcontainers.Configurations.ComposableEnumerable`1" /> allows to choose how existing builder configurations are composed.
            </remarks>
            <param name="command">A list of commands, "executable", "param1", "param2" or "param1", "param2".</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithEnvironment(System.String,System.String)">
            <summary>
            Sets the environment variable.
            </summary>
            <param name="name">The environment variable name.</param>
            <param name="value">The environment variable value.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithEnvironment(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Sets the environment variable.
            </summary>
            <param name="environments">A dictionary of environment variables.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithExposedPort(System.Int32)">
            <summary>
            Exposes the port without publishing it to the host system's interfaces.
            </summary>
            <param name="port">The port.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithExposedPort(System.String)">
            <summary>
            Exposes the port without publishing it to the host system's interfaces.
            </summary>
            <param name="port">The port.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithPortBinding(System.Int32,System.Boolean)">
            <summary>
            Binds the container port to a random host port.
            </summary>
            <param name="port">The container port.</param>
            <param name="assignRandomHostPort">Determines whether Testcontainers assigns a random host port or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithPortBinding(System.Int32,System.Int32)">
            <summary>
            Binds the container port to a random host port.
            </summary>
            <param name="hostPort">The container port.</param>
            <param name="containerPort">Determines whether Testcontainers assigns a random host port or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithPortBinding(System.String,System.Boolean)">
            <summary>
            Binds the container port to a random host port.
            </summary>
            <param name="port">The container port.</param>
            <param name="assignRandomHostPort">Determines whether Testcontainers assigns a random host port or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithPortBinding(System.String,System.String)">
            <summary>
            Binds the container port to a random host port.
            </summary>
            <param name="hostPort">The container port.</param>
            <param name="containerPort">Determines whether Testcontainers assigns a random host port or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithResourceMapping(DotNet.Testcontainers.Configurations.IResourceMapping)">
            <summary>
            Copies the byte array content of the resource mapping to the created container before it starts.
            </summary>
            <param name="resourceMapping">The resource mapping.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithResourceMapping(System.Byte[],System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Copies the byte array content to the created container before it starts.
            </summary>
            <param name="resourceContent">The byte array content of the resource mapping.</param>
            <param name="filePath">The target file path to copy the file to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithResourceMapping(System.String,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
             Copies the contents of a URL, a test host directory or file to the container before it starts.
             </summary>
             <remarks>
             If the source corresponds to a file or the Uri scheme corresponds to a file,
             the content is copied to the target directory path. If the Uri scheme
             corresponds to HTTP or HTTPS, the content is copied to the target file path.
            
             If you prefer to copy a file to a specific target file path instead of a
             directory, use: <see cref="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithResourceMapping(System.IO.FileInfo,System.IO.FileInfo,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)" />.
             </remarks>
             <param name="source">The source URL, directory or file to be copied.</param>
             <param name="target">The target directory or file path to copy the file to.</param>
             <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
             <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
             <param name="fileMode">The POSIX file mode permission.</param>
             <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithResourceMapping(System.IO.DirectoryInfo,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Copies a test host directory or file to the container before it starts.
            </summary>
            <param name="source">The source directory to be copied.</param>
            <param name="target">The target directory path to copy the files to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithResourceMapping(System.IO.FileInfo,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Copies a test host directory or file to the container before it starts.
            </summary>
            <param name="source">The source file to be copied.</param>
            <param name="target">The target directory path to copy the file to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithResourceMapping(System.IO.FileInfo,System.IO.FileInfo,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Copies a test host file to the container before it starts.
            </summary>
            <param name="source">The source file to be copied.</param>
            <param name="target">The target file path to copy the file to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithResourceMapping(System.Uri,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
             Copies a file from a URL to the container before it starts.
             </summary>
             <remarks>
             If the Uri scheme corresponds to a file, the content is copied to the target
             directory path. If the Uri scheme corresponds to HTTP or HTTPS, the content is
             copied to the target file path.
            
             The Uri scheme must be either <c>http</c>, <c>https</c> or <c>file</c>.
            
             If you prefer to copy a file to a specific target file path instead of a
             directory, use: <see cref="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithResourceMapping(System.IO.FileInfo,System.IO.FileInfo,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)" />.
             </remarks>
             <param name="source">The source URL of the file to be copied.</param>
             <param name="target">The target directory or file path to copy the file to.</param>
             <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
             <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
             <param name="fileMode">The POSIX file mode permission.</param>
             <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithMount(DotNet.Testcontainers.Configurations.IMount)">
            <summary>
            Assigns the mount configuration to manage data in the container.
            </summary>
            <param name="mount">The mount configuration.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithBindMount(System.String,System.String)">
            <summary>
            Binds and mounts the specified host machine volume into the container.
            </summary>
            <param name="source">An absolute path or a name value within the host machine.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithBindMount(System.String,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Binds and mounts the specified host machine volume into the container.
            </summary>
            <param name="source">An absolute path or a name value within the host machine.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithVolumeMount(System.String,System.String)">
            <summary>
            Mounts the specified managed volume into the container.
            </summary>
            <param name="source">The name of the managed volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithVolumeMount(System.String,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Mounts the specified managed volume into the container.
            </summary>
            <param name="source">The name of the managed volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithVolumeMount(DotNet.Testcontainers.Volumes.IVolume,System.String)">
            <summary>
            Mounts the specified managed volume into the container.
            </summary>
            <param name="volume">The managed volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithVolumeMount(DotNet.Testcontainers.Volumes.IVolume,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Mounts the specified managed volume into the container.
            </summary>
            <param name="volume">The managed volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithTmpfsMount(System.String)">
            <summary>
            Mounts the specified tmpfs (temporary file system) volume into the container.
            </summary>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithTmpfsMount(System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Mounts the specified tmpfs (temporary file system) volume into the container.
            </summary>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithNetwork(System.String)">
            <summary>
            Assigns the specified network to the container.
            </summary>
            <param name="name">The network's name to connect to.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithNetwork(DotNet.Testcontainers.Networks.INetwork)">
            <summary>
            Assigns the specified network to the container.
            </summary>
            <param name="network">The network to connect the container to.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithNetworkAliases(System.String[])">
            <summary>
            Assigns the specified network-scoped aliases to the container.
            </summary>
            <param name="networkAliases">The network-scoped aliases.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithNetworkAliases(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Assigns the specified network-scoped aliases to the container.
            </summary>
            <param name="networkAliases">A list of network-scoped aliases.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithExtraHost(System.String,System.String)">
            <summary>
            Adds the extra host to "/etc/hosts" respectively "%WINDIR%\\system32\\drivers\\etc\\hosts".
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="ipAddress">The IP address.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithAutoRemove(System.Boolean)">
            <summary>
            Cleans up the container after it exits.
            </summary>
            <remarks>
            It is recommended to rely on the Resource Reaper to clean up resources: https://dotnet.testcontainers.org/api/resource_reaper/.
            </remarks>
            <param name="autoRemove">Determines whether Docker removes the container after it exits or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithPrivileged(System.Boolean)">
            <summary>
            Sets the privileged flag.
            </summary>
            <param name="privileged">Determines whether the privileged flag is set or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithOutputConsumer(DotNet.Testcontainers.Configurations.IOutputConsumer)">
            <summary>
            Sets the output consumer to capture the container's stdout and stderr messages.
            </summary>
            <param name="outputConsumer">The output consumer.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithWaitStrategy(DotNet.Testcontainers.Configurations.IWaitForContainerOS)">
            <summary>
            Sets the wait strategies to indicate readiness of the container.
            </summary>
            <param name="waitStrategy">The wait strategy.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithStartupCallback(System.Func{`1,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Sets a startup callback to invoke after the container start.
            </summary>
            <remarks>
            The callback method is invoked after the container start, but before the wait strategies.
            </remarks>
            <param name="startupCallback">The callback method to invoke.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.WithStartupCallback(System.Func{`1,`2,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Sets a startup callback to invoke after the container start.
            </summary>
            <remarks>
            The callback method is invoked after the container start, but before the wait strategies.
            </remarks>
            <param name="startupCallback">The callback method to invoke.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.Init">
            <summary>
            Initializes the fluent Docker resource builder.
            </summary>
            <remarks>
            Due to the immutable design decision the configuration cannot be kept during the object instantiation.
            To keep the configuration override <see cref="P:DotNet.Testcontainers.Builders.AbstractBuilder`4.DockerResourceConfiguration" />.
            </remarks>
            <example>
              <code>
              public sealed class CustomBuilder : AbstractBuilder&lt;CustomBuilder, IContainer, IContainerConfiguration&gt;
              {
                public CustomBuilder() : base(new ContainerConfiguration())
                {
                  this.DockerResourceConfiguration = this.Init().DockerResourceConfiguration;
                }
              <br />
                protected override IContainerConfiguration DockerResourceConfiguration { get; }
              <br />
                protected override CustomBuilder Init()
                {
                  return base.Init().WithLabel("custom.builder", bool.TrueString.ToLowerInvariant());
                }
              }
              </code>
            </example>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.Validate">
            <summary>
            Validates the Docker resource configuration.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.ValidateLicenseAgreement">
            <summary>
            Validates the license agreement.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when the license agreement is not accepted.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ContainerBuilder`3.Clone(DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Clones the Docker resource builder configuration.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.DockerConfigurationException">
            <summary>
            Represents an exception that is thrown when the Docker configuration file
            cannot be read successfully.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.DockerConfigurationException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.DockerConfigurationException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.DockerUnavailableException">
            <summary>
            Represents an exception that is thrown when a connection to the Docker endpoint
            cannot be established successfully.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerUnavailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.DockerUnavailableException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.DockerUnavailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.DockerUnavailableException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.IAbstractBuilder`3">
            <summary>
            A fluent Docker resource builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
            <typeparam name="TResourceEntity">The resource entity.</typeparam>
            <typeparam name="TCreateResourceEntity">The underlying Docker.DotNet resource entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithDockerEndpoint(System.String)">
            <summary>
            Sets the Docker API endpoint.
            </summary>
            <remarks>
            Testcontainers automatically discovers the Docker environment and applies the configuration.
            It is recommended to use the auto discovery. Only certain edge cases require this enhanced API.
            </remarks>
            <param name="endpoint">The Docker API endpoint.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithDockerEndpoint(System.Uri)">
            <summary>
            Sets the Docker API endpoint.
            </summary>
            <remarks>
            Testcontainers automatically discovers the Docker environment and applies the configuration.
            It is recommended to use the auto discovery. Only certain edge cases require this enhanced API.
            </remarks>
            <param name="endpoint">The Docker API endpoint.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithDockerEndpoint(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration)">
            <summary>
            Sets the Docker API endpoint.
            </summary>
            <remarks>
            Testcontainers automatically discovers the Docker environment and applies the configuration.
            It is recommended to use the auto discovery. Only certain edge cases require this enhanced API.
            </remarks>
            <param name="dockerEndpointAuthConfig">The Docker endpoint authentication configuration.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithCleanUp(System.Boolean)">
            <summary>
            Cleans up the Docker resource after the tests are finished.
            </summary>
            <param name="cleanUp">Determines whether the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> removes the Docker resource after the tests are finished or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithReuse(System.Boolean)">
             <summary>
             Reuses an existing Docker resource.
             </summary>
             <remarks>
             If reuse is enabled, Testcontainers will label the resource with a hash value
             according to the respective build/resource configuration. When Testcontainers finds a
             matching resource, it will reuse this resource instead of creating a new one. Enabling
             reuse will disable the resource reaper, meaning the resource will not be cleaned up
             after the tests are finished.
            
             This is an <b>experimental</b> feature. Reuse does not take all builder
             configurations into account when calculating the hash value. There might be configurations
             where Testcontainers is not, or not yet, able to find a matching resource and
             recreate the resource.
             </remarks>
             <param name="reuse">Determines whether to reuse an existing resource configuration or not.</param>
             <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithLabel(System.String,System.String)">
            <summary>
            Adds user-defined metadata to the Docker resource.
            </summary>
            <param name="name">The label name.</param>
            <param name="value">The label value.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithLabel(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Adds user-defined metadata to the Docker resource.
            </summary>
            <param name="labels">A dictionary of environment variables.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithCreateParameterModifier(System.Action{`2})">
            <summary>
            Allows low level modifications of the Docker.DotNet entity after the builder configuration has been applied. Multiple low level modifications will be executed in order of insertion.
            </summary>
            <remarks>
            This API is intended for special use cases only. We do not recommend using it and cannot maintain backwards compatibility.
            </remarks>
            <param name="parameterModifier">The action that invokes modifying the Docker.DotNet entity instance.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Sets the logger.
            </summary>
            <param name="logger">The logger.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.Build">
            <summary>
            Builds an instance of <typeparamref name="TResourceEntity" /> with the given resource configuration.
            </summary>
            <returns>A configured instance of <typeparamref name="TResourceEntity" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.IContainerBuilder`3">
            <summary>
            A fluent Docker container builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
            <typeparam name="TContainerEntity">The resource entity.</typeparam>
            <typeparam name="TConfigurationEntity">The configuration entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithAcceptLicenseAgreement(System.Boolean)">
            <summary>
            Accepts the license agreement.
            </summary>
            <remarks>
            Modules that require a license agreement must override and implement this
            method to enforce proper license acceptance behavior.
            </remarks>
            <param name="acceptLicenseAgreement">A boolean value indicating whether the license agreement is accepted.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the module does not require a license agreement.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.DependsOn(DotNet.Testcontainers.Containers.IContainer)">
            <summary>
            Sets the dependent container to resolve and start before starting this container configuration.
            </summary>
            <param name="container">The dependent container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.DependsOn(DotNet.Testcontainers.Networks.INetwork)">
            <summary>
            Sets the dependent network to resolve and create before starting this container configuration.
            </summary>
            <param name="network">The dependent network.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.DependsOn(DotNet.Testcontainers.Volumes.IVolume,System.String)">
            <summary>
            Sets the dependent volume to resolve and create before starting this container configuration.
            </summary>
            <param name="volume">The dependent volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.DependsOn(DotNet.Testcontainers.Volumes.IVolume,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Sets the dependent volume to resolve and create before starting this container configuration.
            </summary>
            <param name="volume">The dependent volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithImage(System.String)">
            <summary>
            Sets an image for which to create the container.
            </summary>
            <param name="image">The image.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithImage(DotNet.Testcontainers.Images.IImage)">
            <summary>
            Sets an image for which to create the container.
            </summary>
            <param name="image">The image.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithImagePullPolicy(System.Func{Docker.DotNet.Models.ImageInspectResponse,System.Boolean})">
            <summary>
            Sets the image pull policy.
            </summary>
            <param name="imagePullPolicy">The image pull policy.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithHostname(System.String)">
            <summary>
            Sets the hostname.
            </summary>
            <param name="hostname">The hostname.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithMacAddress(System.String)">
            <summary>
            Sets the MAC address.
            </summary>
            <param name="macAddress">The MAC address.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithWorkingDirectory(System.String)">
            <summary>
            Sets the working directory.
            </summary>
            <param name="workingDirectory">The working directory.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithEntrypoint(System.String[])">
            <summary>
            Overrides the container's entrypoint executable.
            </summary>
            <param name="entrypoint">The entrypoint executable.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithCommand(System.String[])">
            <summary>
            Overrides the container's command arguments.
            </summary>
            <param name="command">A list of commands, "executable", "param1", "param2" or "param1", "param2".</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithCommand(DotNet.Testcontainers.Configurations.ComposableEnumerable{System.String})">
            <summary>
            Overrides the container's command arguments.
            </summary>
            <remarks>
            The <see cref="T:DotNet.Testcontainers.Configurations.ComposableEnumerable`1" /> allows to choose how existing builder configurations are composed.
            </remarks>
            <param name="command">A list of commands, "executable", "param1", "param2" or "param1", "param2".</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithEnvironment(System.String,System.String)">
            <summary>
            Sets the environment variable.
            </summary>
            <param name="name">The environment variable name.</param>
            <param name="value">The environment variable value.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithEnvironment(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Sets the environment variable.
            </summary>
            <param name="environments">A dictionary of environment variables.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithExposedPort(System.Int32)">
            <summary>
            Exposes the port without publishing it to the host system's interfaces.
            </summary>
            <param name="port">The port.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithExposedPort(System.String)">
            <summary>
            Exposes the port without publishing it to the host system's interfaces.
            </summary>
            <param name="port">The port.</param>
            <remarks>Append /tcp|udp|sctp to <paramref name="port" /> to change the protocol e.g. "53/udp".</remarks>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithPortBinding(System.Int32,System.Boolean)">
            <summary>
            Binds the container port to a random host port.
            </summary>
            <param name="port">The container port.</param>
            <param name="assignRandomHostPort">Determines whether Testcontainers assigns a random host port or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithPortBinding(System.Int32,System.Int32)">
            <summary>
            Binds the container port to a specific host port.
            </summary>
            <param name="hostPort">The host port.</param>
            <param name="containerPort">The container port.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithPortBinding(System.String,System.Boolean)">
            <summary>
            Binds the container port to a random host port.
            </summary>
            <param name="port">The container port.</param>
            <param name="assignRandomHostPort">Determines whether Testcontainers assigns a random host port or not.</param>
            <remarks>Append /tcp|udp|sctp to <paramref name="port" /> to change the protocol e.g. "53/udp".</remarks>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithPortBinding(System.String,System.String)">
            <summary>
            Binds the container port to a specific host port.
            </summary>
            <param name="hostPort">The host port.</param>
            <param name="containerPort">The container port.</param>
            <remarks>Append /tcp|udp|sctp to <paramref name="containerPort" /> to change the protocol e.g. "53/udp".</remarks>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithResourceMapping(DotNet.Testcontainers.Configurations.IResourceMapping)">
            <summary>
            Copies the byte array content of the resource mapping to the created container before it starts.
            </summary>
            <param name="resourceMapping">The resource mapping.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithResourceMapping(System.Byte[],System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Copies the byte array content to the created container before it starts.
            </summary>
            <param name="resourceContent">The byte array content of the resource mapping.</param>
            <param name="filePath">The target file path to copy the file to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithResourceMapping(System.String,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)">
             <summary>
             Copies the contents of a URL, a test host directory or file to the container before it starts.
             </summary>
             <remarks>
             If the source corresponds to a file or the Uri scheme corresponds to a file,
             the content is copied to the target directory path. If the Uri scheme
             corresponds to HTTP or HTTPS, the content is copied to the target file path.
            
             If you prefer to copy a file to a specific target file path instead of a
             directory, use: <see cref="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithResourceMapping(System.IO.FileInfo,System.IO.FileInfo,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)" />.
             </remarks>
             <param name="source">The source URL, directory or file to be copied.</param>
             <param name="target">The target directory or file path to copy the file to.</param>
             <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
             <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
             <param name="fileMode">The POSIX file mode permission.</param>
             <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithResourceMapping(System.IO.DirectoryInfo,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Copies a test host directory or file to the container before it starts.
            </summary>
            <param name="source">The source directory to be copied.</param>
            <param name="target">The target directory path to copy the files to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithResourceMapping(System.IO.FileInfo,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Copies a test host directory or file to the container before it starts.
            </summary>
            <param name="source">The source file to be copied.</param>
            <param name="target">The target directory path to copy the file to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithResourceMapping(System.IO.FileInfo,System.IO.FileInfo,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)">
            <summary>
            Copies a test host file to the container before it starts.
            </summary>
            <param name="source">The source file to be copied.</param>
            <param name="target">The target file path to copy the file to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithResourceMapping(System.Uri,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)">
             <summary>
             Copies a file from a URL to the container before it starts.
             </summary>
             <remarks>
             If the Uri scheme corresponds to a file, the content is copied to the target
             directory path. If the Uri scheme corresponds to HTTP or HTTPS, the content is
             copied to the target file path.
            
             The Uri scheme must be either <c>http</c>, <c>https</c> or <c>file</c>.
            
             If you prefer to copy a file to a specific target file path instead of a
             directory, use: <see cref="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithResourceMapping(System.IO.FileInfo,System.IO.FileInfo,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes)" />.
             </remarks>
             <param name="source">The source URL of the file to be copied.</param>
             <param name="target">The target directory or file path to copy the file to.</param>
             <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
             <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
             <param name="fileMode">The POSIX file mode permission.</param>
             <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithMount(DotNet.Testcontainers.Configurations.IMount)">
            <summary>
            Assigns the mount configuration to manage data in the container.
            </summary>
            <param name="mount">The mount configuration.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithBindMount(System.String,System.String)">
            <summary>
            Binds and mounts the specified host machine volume into the container.
            </summary>
            <param name="source">An absolute path or a name value within the host machine.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithBindMount(System.String,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Binds and mounts the specified host machine volume into the container.
            </summary>
            <param name="source">An absolute path or a name value within the host machine.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithVolumeMount(System.String,System.String)">
            <summary>
            Mounts the specified managed volume into the container.
            </summary>
            <param name="source">The name of the managed volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithVolumeMount(System.String,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Mounts the specified managed volume into the container.
            </summary>
            <param name="source">The name of the managed volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithVolumeMount(DotNet.Testcontainers.Volumes.IVolume,System.String)">
            <summary>
            Mounts the specified managed volume into the container.
            </summary>
            <param name="volume">The managed volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithVolumeMount(DotNet.Testcontainers.Volumes.IVolume,System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Mounts the specified managed volume into the container.
            </summary>
            <param name="volume">The managed volume.</param>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithTmpfsMount(System.String)">
            <summary>
            Mounts the specified tmpfs (temporary file system) volume into the container.
            </summary>
            <param name="destination">An absolute path as destination in the container.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithTmpfsMount(System.String,DotNet.Testcontainers.Configurations.AccessMode)">
            <summary>
            Mounts the specified tmpfs (temporary file system) volume into the container.
            </summary>
            <param name="destination">An absolute path as destination in the container.</param>
            <param name="accessMode">The volume access mode.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithNetwork(System.String)">
            <summary>
            Assigns the specified network to the container.
            </summary>
            <param name="name">The network's name to connect to.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithNetwork(DotNet.Testcontainers.Networks.INetwork)">
            <summary>
            Assigns the specified network to the container.
            </summary>
            <param name="network">The network to connect the container to.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithNetworkAliases(System.String[])">
            <summary>
            Assigns the specified network-scoped aliases to the container.
            </summary>
            <param name="networkAliases">The network-scoped aliases.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithNetworkAliases(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Assigns the specified network-scoped aliases to the container.
            </summary>
            <param name="networkAliases">A list of network-scoped aliases.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithExtraHost(System.String,System.String)">
            <summary>
            Adds the extra host to "/etc/hosts" respectively "%WINDIR%\\system32\\drivers\\etc\\hosts".
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="ipAddress">The IP address.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithAutoRemove(System.Boolean)">
            <summary>
            Cleans up the container after it exits.
            </summary>
            <remarks>
            It is recommended to rely on the Resource Reaper to clean up resources: https://dotnet.testcontainers.org/api/resource_reaper/.
            </remarks>
            <param name="autoRemove">Determines whether Docker removes the container after it exits or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithPrivileged(System.Boolean)">
            <summary>
            Sets the privileged flag.
            </summary>
            <param name="privileged">Determines whether the privileged flag is set or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithOutputConsumer(DotNet.Testcontainers.Configurations.IOutputConsumer)">
            <summary>
            Sets the output consumer to capture the container's stdout and stderr messages.
            </summary>
            <param name="outputConsumer">The output consumer.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithWaitStrategy(DotNet.Testcontainers.Configurations.IWaitForContainerOS)">
            <summary>
            Sets the wait strategies to indicate readiness of the container.
            </summary>
            <param name="waitStrategy">The wait strategy.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithStartupCallback(System.Func{`1,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Sets a startup callback to invoke after the container start.
            </summary>
            <remarks>
            The callback method is invoked after the container start, but before the wait strategies.
            </remarks>
            <param name="startupCallback">The callback method to invoke.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IContainerBuilder`3.WithStartupCallback(System.Func{`1,`2,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Sets a startup callback to invoke after the container start.
            </summary>
            <remarks>
            The callback method is invoked after the container start, but before the wait strategies.
            </remarks>
            <param name="startupCallback">The callback method to invoke.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1">
            <summary>
            A fluent Docker image builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithName(DotNet.Testcontainers.Images.IImage)">
            <summary>
            Sets the name.
            </summary>
            <param name="image">The image.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithContextDirectory(System.String)">
            <summary>
            Sets the directory to use as the Docker build context.
            This is the directory that Docker will use to resolve files referenced in the Dockerfile.
            </summary>
            <param name="contextDirectory">An absolute path or relative name of the directory to use as the Docker build context.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithDockerfile(System.String)">
            <summary>
            Sets the path to the Dockerfile to use for the build.
            </summary>
            <param name="dockerfile">The filename or path of the Dockerfile.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithDockerfileDirectory(System.String)">
            <summary>
            Sets the directory containing the Dockerfile.
            </summary>
            <param name="dockerfileDirectory">An absolute path or relative path to the directory containing the Dockerfile.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithDockerfileDirectory(DotNet.Testcontainers.Builders.CommonDirectoryPath,System.String)">
            <summary>
            Sets the directory containing the Dockerfile.
            </summary>
            <param name="commonDirectoryPath">A common directory path that contains the Dockerfile directory.</param>
            <param name="dockerfileDirectory">An absolute path or relative path to the directory containing the Dockerfile.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithTarget(System.String)">
            <summary>
            Sets the target build stage for the Docker image, allowing partial builds for
            multi-stage Dockerfiles.
            </summary>
            <param name="target">The target build stage to use for the image build.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithImageBuildPolicy(System.Func{Docker.DotNet.Models.ImageInspectResponse,System.Boolean})">
            <summary>
            Sets the image build policy.
            </summary>
            <param name="imageBuildPolicy">The image build policy.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithDeleteIfExists(System.Boolean)">
            <summary>
            Removes an existing image before building it again.
            </summary>
            <param name="deleteIfExists">Determines whether Testcontainers removes an existing image or not.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IImageFromDockerfileBuilder`1.WithBuildArgument(System.String,System.String)">
            <summary>
            Sets the build argument.
            </summary>
            <param name="name">The build argument name.</param>
            <param name="value">The build argument value.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder">
            <summary>
            A fluent Docker image builder.
            </summary>
            <example>
              The default configuration is equivalent to:
              <code>
              _ = new ImageFromDockerfileBuilder()
                .WithDockerEndpoint(TestcontainersSettings.OS.DockerEndpointAuthConfig)
                .WithLabel(DefaultLabels.Instance)
                .WithCleanUp(true)
                .WithImageBuildPolicy(PullPolicy.Always)
                .WithDockerfile("Dockerfile")
                .WithDockerfileDirectory(Directory.GetCurrentDirectory())
                .WithName(new DockerImage("localhost/testcontainers", Guid.NewGuid().ToString("D"), string.Empty))
                .Build();
              </code>
            </example>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" /> class.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.DockerResourceConfiguration">
            <summary>
            Gets the Docker resource configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithName(DotNet.Testcontainers.Images.IImage)">
            <summary>
            Sets the name.
            </summary>
            <param name="image">The image.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithContextDirectory(System.String)">
            <summary>
            Sets the directory to use as the Docker build context.
            This is the directory that Docker will use to resolve files referenced in the Dockerfile.
            </summary>
            <param name="contextDirectory">An absolute path or relative name of the directory to use as the Docker build context.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithDockerfile(System.String)">
            <summary>
            Sets the path to the Dockerfile to use for the build.
            </summary>
            <param name="dockerfile">The filename or path of the Dockerfile.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithDockerfileDirectory(System.String)">
            <summary>
            Sets the directory containing the Dockerfile.
            </summary>
            <param name="dockerfileDirectory">An absolute path or relative path to the directory containing the Dockerfile.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithDockerfileDirectory(DotNet.Testcontainers.Builders.CommonDirectoryPath,System.String)">
            <summary>
            Sets the directory containing the Dockerfile.
            </summary>
            <param name="commonDirectoryPath">A common directory path that contains the Dockerfile directory.</param>
            <param name="dockerfileDirectory">An absolute path or relative path to the directory containing the Dockerfile.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithTarget(System.String)">
            <summary>
            Sets the target build stage for the Docker image, allowing partial builds for
            multi-stage Dockerfiles.
            </summary>
            <param name="target">The target build stage to use for the image build.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithImageBuildPolicy(System.Func{Docker.DotNet.Models.ImageInspectResponse,System.Boolean})">
            <summary>
            Sets the image build policy.
            </summary>
            <param name="imageBuildPolicy">The image build policy.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithDeleteIfExists(System.Boolean)">
            <summary>
            Removes an existing image before building it again.
            </summary>
            <param name="deleteIfExists">Determines whether Testcontainers removes an existing image or not.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.WithBuildArgument(System.String,System.String)">
            <summary>
            Sets the build argument.
            </summary>
            <param name="name">The build argument name.</param>
            <param name="value">The build argument value.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.Build">
            <summary>
            Builds an instance of <see cref="T:DotNet.Testcontainers.Images.IFutureDockerImage" /> with the given resource configuration.
            </summary>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Images.IFutureDockerImage" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.Init">
            <summary>
            Initializes the fluent Docker resource builder.
            </summary>
            <remarks>
            Due to the immutable design decision the configuration cannot be kept during the object instantiation.
            To keep the configuration override <see cref="P:DotNet.Testcontainers.Builders.AbstractBuilder`4.DockerResourceConfiguration" />.
            </remarks>
            <example>
              <code>
              public sealed class CustomBuilder : AbstractBuilder&lt;CustomBuilder, IContainer, IContainerConfiguration&gt;
              {
                public CustomBuilder() : base(new ContainerConfiguration())
                {
                  this.DockerResourceConfiguration = this.Init().DockerResourceConfiguration;
                }
              <br />
                protected override IContainerConfiguration DockerResourceConfiguration { get; }
              <br />
                protected override CustomBuilder Init()
                {
                  return base.Init().WithLabel("custom.builder", bool.TrueString.ToLowerInvariant());
                }
              }
              </code>
            </example>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.Validate">
            <summary>
            Validates the Docker resource configuration.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.Clone(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.ImageBuildParameters})">
            <summary>
            Clones the Docker resource builder configuration.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder.Merge(DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration,DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration)">
            <summary>
            Merges the Docker resource builder configuration.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.ImageFromDockerfileBuilder" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.INetworkBuilder`1">
            <summary>
            A fluent Docker network builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.INetworkBuilder`1.WithName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.INetworkBuilder`1.WithDriver(DotNet.Testcontainers.Configurations.NetworkDriver)">
            <summary>
            Sets the driver.
            </summary>
            <param name="driver">The driver.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.INetworkBuilder`1.WithOption(System.String,System.String)">
            <summary>
            Sets the network option.
            </summary>
            <param name="name">The network option name.</param>
            <param name="value">The network option value.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.IVolumeBuilder`1">
            <summary>
            A fluent Docker volume builder.
            </summary>
            <typeparam name="TBuilderEntity">The builder entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.IVolumeBuilder`1.WithName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>A configured instance of <typeparamref name="TBuilderEntity" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.NetworkBuilder">
            <summary>
            A fluent Docker network builder.
            </summary>
            <example>
              The default configuration is equivalent to:
              <code>
              _ = new NetworkBuilder()
                .WithDockerEndpoint(TestcontainersSettings.OS.DockerEndpointAuthConfig)
                .WithLabel(DefaultLabels.Instance)
                .WithCleanUp(true)
                .WithDriver(NetworkDriver.Bridge)
                .Build();
              </code>
            </example>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.NetworkBuilder" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.#ctor(DotNet.Testcontainers.Configurations.INetworkConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.NetworkBuilder" /> class.
            </summary>
            <param name="dockerResourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.NetworkBuilder.DockerResourceConfiguration">
            <summary>
            Gets the Docker resource configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.WithName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.NetworkBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.WithDriver(DotNet.Testcontainers.Configurations.NetworkDriver)">
            <summary>
            Sets the driver.
            </summary>
            <param name="driver">The driver.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.NetworkBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.WithOption(System.String,System.String)">
            <summary>
            Sets the network option.
            </summary>
            <param name="name">The network option name.</param>
            <param name="value">The network option value.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.NetworkBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.Build">
            <summary>
            Builds an instance of <see cref="T:DotNet.Testcontainers.Networks.INetwork" /> with the given resource configuration.
            </summary>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Networks.INetwork" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.Init">
            <summary>
            Initializes the fluent Docker resource builder.
            </summary>
            <remarks>
            Due to the immutable design decision the configuration cannot be kept during the object instantiation.
            To keep the configuration override <see cref="P:DotNet.Testcontainers.Builders.AbstractBuilder`4.DockerResourceConfiguration" />.
            </remarks>
            <example>
              <code>
              public sealed class CustomBuilder : AbstractBuilder&lt;CustomBuilder, IContainer, IContainerConfiguration&gt;
              {
                public CustomBuilder() : base(new ContainerConfiguration())
                {
                  this.DockerResourceConfiguration = this.Init().DockerResourceConfiguration;
                }
              <br />
                protected override IContainerConfiguration DockerResourceConfiguration { get; }
              <br />
                protected override CustomBuilder Init()
                {
                  return base.Init().WithLabel("custom.builder", bool.TrueString.ToLowerInvariant());
                }
              }
              </code>
            </example>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.NetworkBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.Validate">
            <summary>
            Validates the Docker resource configuration.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.Clone(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.NetworksCreateParameters})">
            <summary>
            Clones the Docker resource builder configuration.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.NetworkBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.NetworkBuilder.Merge(DotNet.Testcontainers.Configurations.INetworkConfiguration,DotNet.Testcontainers.Configurations.INetworkConfiguration)">
            <summary>
            Merges the Docker resource builder configuration.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.NetworkBuilder" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.VolumeBuilder">
            <summary>
            A fluent Docker volume builder.
            </summary>
            <example>
              The default configuration is equivalent to:
              <code>
              _ = new VolumeBuilder()
                .WithDockerEndpoint(TestcontainersSettings.OS.DockerEndpointAuthConfig)
                .WithLabel(DefaultLabels.Instance)
                .WithCleanUp(true)
                .Build();
              </code>
            </example>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.VolumeBuilder" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.#ctor(DotNet.Testcontainers.Configurations.IVolumeConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Builders.VolumeBuilder" /> class.
            </summary>
            <param name="dockerResourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Builders.VolumeBuilder.DockerResourceConfiguration">
            <summary>
            Gets the Docker resource configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.WithName(System.String)">
            <summary>
            Sets the name.
            </summary>
            <param name="name">The name.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.VolumeBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.Build">
            <summary>
            Builds an instance of <see cref="T:DotNet.Testcontainers.Volumes.IVolume" /> with the given resource configuration.
            </summary>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Volumes.IVolume" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.Init">
            <summary>
            Initializes the fluent Docker resource builder.
            </summary>
            <remarks>
            Due to the immutable design decision the configuration cannot be kept during the object instantiation.
            To keep the configuration override <see cref="P:DotNet.Testcontainers.Builders.AbstractBuilder`4.DockerResourceConfiguration" />.
            </remarks>
            <example>
              <code>
              public sealed class CustomBuilder : AbstractBuilder&lt;CustomBuilder, IContainer, IContainerConfiguration&gt;
              {
                public CustomBuilder() : base(new ContainerConfiguration())
                {
                  this.DockerResourceConfiguration = this.Init().DockerResourceConfiguration;
                }
              <br />
                protected override IContainerConfiguration DockerResourceConfiguration { get; }
              <br />
                protected override CustomBuilder Init()
                {
                  return base.Init().WithLabel("custom.builder", bool.TrueString.ToLowerInvariant());
                }
              }
              </code>
            </example>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.VolumeBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.Validate">
            <summary>
            Validates the Docker resource configuration.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.Clone(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.VolumesCreateParameters})">
            <summary>
            Clones the Docker resource builder configuration.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.VolumeBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.VolumeBuilder.Merge(DotNet.Testcontainers.Configurations.IVolumeConfiguration,DotNet.Testcontainers.Configurations.IVolumeConfiguration)">
            <summary>
            Merges the Docker resource builder configuration.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Builders.VolumeBuilder" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Builders.Wait">
            <summary>
            Container platform specific wait strategies.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Wait.ForUnixContainer">
            <summary>
            Returns the pre-configured wait strategies for Unix containers.
            </summary>
            <returns>Implementation of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" /> for Unix containers.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Builders.Wait.ForWindowsContainer">
            <summary>
            Returns the pre-configured wait strategies for Windows containers.
            </summary>
            <returns>Implementation of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" /> for Windows containers.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.DockerEndpointAuthenticationConfiguration">
            <summary>
            An authentication configuration to authenticate against private Docker clients.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.DockerEndpointAuthenticationConfiguration.#ctor(System.Uri,Docker.DotNet.Credentials)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.DockerEndpointAuthenticationConfiguration" /> struct.
            </summary>
            <param name="endpoint">The Docker API endpoint.</param>
            <param name="credentials">The Docker API authentication credentials.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.DockerEndpointAuthenticationConfiguration.Endpoint">
            <summary>
            Gets the Docker API endpoint.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.DockerEndpointAuthenticationConfiguration.Credentials">
            <summary>
            Gets the Docker API credentials.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.DockerEndpointAuthenticationConfiguration.GetDockerClientConfiguration(System.Guid)">
            <summary>
            Gets the Docker client configuration.
            </summary>
            <param name="sessionId">The session id.</param>
            <returns>The Docker client configuration.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration">
            <summary>
            An authentication configuration to authenticate against private Docker clients.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration.Endpoint">
            <summary>
            Gets the Docker API endpoint.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration.Credentials">
            <summary>
            Gets the Docker API credentials.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration.GetDockerClientConfiguration(System.Guid)">
            <summary>
            Gets the Docker client configuration.
            </summary>
            <param name="sessionId">The session id.</param>
            <returns>The Docker client configuration.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IDockerRegistryAuthenticationConfiguration">
            <summary>
            An authentication configuration to authenticate against private Docker registries.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IDockerRegistryAuthenticationConfiguration.RegistryEndpoint">
            <summary>
            Gets the Docker registry endpoint.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IDockerRegistryAuthenticationConfiguration.Username">
            <summary>
            Gets the username.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IDockerRegistryAuthenticationConfiguration.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IDockerRegistryAuthenticationConfiguration.IdentityToken">
            <summary>
            Gets the identity token.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.AppendDictionary`2">
            <summary>
            Represents a composable dictionary that combines its elements by appending
            the elements of another dictionary with overwriting existing keys.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.AppendDictionary`2.#ctor(System.Collections.Generic.IReadOnlyDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.AppendDictionary`2" /> class.
            </summary>
            <param name="dictionary">The dictionary whose elements are copied to the new dictionary.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.AppendDictionary`2.Compose(System.Collections.Generic.IReadOnlyDictionary{`0,`1})">
            <summary>
            Combines the current dictionary with the specified dictionary according to
            the composition strategy defined by the class.
            </summary>
            <remarks>
            The <paramref name="other" /> parameter corresponds to the previous builder
            configuration.
            </remarks>
            <param name="other">The incoming dictionary to compose with this dictionary.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> that contains the result of the composition.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.AppendEnumerable`1">
            <summary>
            Represents a composable collection that combines its elements by appending
            the elements of another collection.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.AppendEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.AppendEnumerable`1" /> class.
            </summary>
            <param name="collection">The collection of items. If <c>null</c>, an empty collection is used.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.AppendEnumerable`1.Compose(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Combines the current collection with the specified collection according to
            the composition strategy defined by the class.
            </summary>
            <remarks>
            The <paramref name="other" /> parameter corresponds to the previous builder
            configuration.
            </remarks>
            <param name="other">The incoming collection to compose with this collection.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the result of the composition.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.ComposableDictionary`2">
            <summary>
            Represents an immutable dictionary that defines a custom strategy for
            composing its elements with those of another dictionary. This class is
            intended to be inherited by implementations that specify how two dictionaries
            should be combined.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ComposableDictionary`2.#ctor(System.Collections.Generic.IReadOnlyDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ComposableDictionary`2" /> class.
            </summary>
            <param name="dictionary">The dictionary of items. If <c>null</c>, an empty dictionary is used.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ComposableDictionary`2.Compose(System.Collections.Generic.IReadOnlyDictionary{`0,`1})">
            <summary>
            Combines the current dictionary with the specified dictionary according to
            the composition strategy defined by the class.
            </summary>
            <remarks>
            The <paramref name="other" /> parameter corresponds to the previous builder
            configuration.
            </remarks>
            <param name="other">The incoming dictionary to compose with this dictionary.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> that contains the result of the composition.</returns>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ComposableDictionary`2.Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary><returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ComposableDictionary`2.Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary><returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ComposableDictionary`2.Count">
            <summary>Gets the number of elements in the collection.</summary><returns>The number of elements in the collection.</returns>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ComposableDictionary`2.Item(`0)">
            <summary>Gets the element that has the specified key in the read-only dictionary.</summary><param name="key">The key to locate.</param><exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception><returns>The element that has the specified key in the read-only dictionary.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ComposableDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the read-only dictionary contains an element that has the specified key.</summary><param name="key">The key to locate.</param><exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception><returns><see langword="true" /> if the read-only dictionary contains an element that has the specified key; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ComposableDictionary`2.TryGetValue(`0,`1@)">
            <summary>Gets the value that is associated with the specified key.</summary><param name="key">The key to locate.</param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param><exception cref="T:System.ArgumentNullException"><paramref name="key" /> is <see langword="null" />.</exception><returns><see langword="true" /> if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element that has the specified key; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ComposableDictionary`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ComposableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.ComposableEnumerable`1">
            <summary>
            Represents an immutable collection that defines a custom strategy for
            composing its elements with those of another collection. This class is
            intended to be inherited by implementations that specify how two collections
            should be combined.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ComposableEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ComposableEnumerable`1" /> class.
            </summary>
            <param name="collection">The collection of items. If <c>null</c>, an empty collection is used.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ComposableEnumerable`1.Compose(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Combines the current collection with the specified collection according to
            the composition strategy defined by the class.
            </summary>
            <remarks>
            The <paramref name="other" /> parameter corresponds to the previous builder
            configuration.
            </remarks>
            <param name="other">The incoming collection to compose with this collection.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the result of the composition.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ComposableEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the current collection.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ComposableEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator for the current collection.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IResourceConfiguration`1">
            <summary>
            A resource configuration.
            </summary>
            <typeparam name="TCreateResourceEntity">The underlying Docker.DotNet resource entity.</typeparam>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceConfiguration`1.SessionId">
            <summary>
            Gets the test session id.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceConfiguration`1.DockerEndpointAuthConfig">
            <summary>
            Gets the Docker endpoint authentication configuration.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceConfiguration`1.Labels">
            <summary>
            Gets a list of labels.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceConfiguration`1.ParameterModifiers">
            <summary>
            Gets a list of low level modifications of the Docker.DotNet entity.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceConfiguration`1.Reuse">
            <summary>
            Gets a value indicating whether to reuse an existing resource configuration or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceConfiguration`1.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IResourceConfiguration`1.GetReuseHash">
            <summary>
            Gets the reuse hash.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.OverwriteDictionary`2">
            <summary>
            Represents a composable dictionary that combines its elements by replacing
            the current dictionary with the elements of another dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.OverwriteDictionary`2.#ctor(System.Collections.Generic.IReadOnlyDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.OverwriteDictionary`2" /> class.
            </summary>
            <param name="dictionary">The dictionary whose elements are copied to the new dictionary.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.OverwriteDictionary`2.Compose(System.Collections.Generic.IReadOnlyDictionary{`0,`1})">
            <summary>
            Combines the current dictionary with the specified dictionary according to
            the composition strategy defined by the class.
            </summary>
            <remarks>
            The <paramref name="other" /> parameter corresponds to the previous builder
            configuration.
            </remarks>
            <param name="other">The incoming dictionary to compose with this dictionary.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> that contains the result of the composition.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.OverwriteEnumerable`1">
            <summary>
            Represents a composable collection that combines its elements by replacing
            the current collection with the elements of another collection.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.OverwriteEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.OverwriteEnumerable`1" /> class.
            </summary>
            <param name="collection">The collection of items. If <c>null</c>, an empty collection is used.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.OverwriteEnumerable`1.Compose(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Combines the current collection with the specified collection according to
            the composition strategy defined by the class.
            </summary>
            <remarks>
            The <paramref name="other" /> parameter corresponds to the previous builder
            configuration.
            </remarks>
            <param name="other">The incoming collection to compose with this collection.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the result of the composition.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.ResourceConfiguration`1">
            <summary>
            A resource configuration.
            </summary>
            <typeparam name="TCreateResourceEntity">The underlying Docker.DotNet resource entity.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.#ctor(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyList{System.Action{`0}},System.Nullable{System.Boolean},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ResourceConfiguration`1" /> class.
            </summary>
            <param name="dockerEndpointAuthenticationConfiguration">The Docker endpoint authentication configuration.</param>
            <param name="labels">The test session id.</param>
            <param name="parameterModifiers">A list of low level modifications of the Docker.DotNet entity.</param>
            <param name="reuse">A value indicating whether to reuse an existing resource configuration or not.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.#ctor(DotNet.Testcontainers.Configurations.IResourceConfiguration{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ResourceConfiguration`1" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.#ctor(DotNet.Testcontainers.Configurations.IResourceConfiguration{`0},DotNet.Testcontainers.Configurations.IResourceConfiguration{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ResourceConfiguration`1" /> class.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.SessionId">
            <summary>
            Gets the test session id.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.DockerEndpointAuthConfig">
            <summary>
            Gets the Docker endpoint authentication configuration.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.Labels">
            <summary>
            Gets a list of labels.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.ParameterModifiers">
            <summary>
            Gets a list of low level modifications of the Docker.DotNet entity.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.Reuse">
            <summary>
            Gets a value indicating whether to reuse an existing resource configuration or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ResourceConfiguration`1.GetReuseHash">
            <summary>
            Gets the reuse hash.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.ContainerConfiguration">
            <summary>
            A container configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ContainerConfiguration.#ctor(DotNet.Testcontainers.Images.IImage,System.Func{Docker.DotNet.Models.ImageInspectResponse,System.Boolean},System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},DotNet.Testcontainers.Configurations.ComposableEnumerable{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{DotNet.Testcontainers.Configurations.IResourceMapping},System.Collections.Generic.IEnumerable{DotNet.Testcontainers.Containers.IContainer},System.Collections.Generic.IEnumerable{DotNet.Testcontainers.Configurations.IMount},System.Collections.Generic.IEnumerable{DotNet.Testcontainers.Networks.INetwork},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},DotNet.Testcontainers.Configurations.IOutputConsumer,System.Collections.Generic.IEnumerable{DotNet.Testcontainers.Configurations.WaitStrategy},System.Func{DotNet.Testcontainers.Containers.IContainer,DotNet.Testcontainers.Configurations.IContainerConfiguration,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ContainerConfiguration" /> class.
            </summary>
            <param name="image">The image.</param>
            <param name="imagePullPolicy">The image pull policy.</param>
            <param name="name">The name.</param>
            <param name="hostname">The hostname.</param>
            <param name="macAddress">The MAC address.</param>
            <param name="workingDirectory">The working directory.</param>
            <param name="entrypoint">The entrypoint.</param>
            <param name="command">The command.</param>
            <param name="environments">A dictionary of environment variables.</param>
            <param name="exposedPorts">A dictionary of exposed ports.</param>
            <param name="portBindings">A dictionary of port bindings.</param>
            <param name="resourceMappings">A list of resource mappings.</param>
            <param name="containers">A list of containers.</param>
            <param name="mounts">A list of mounts.</param>
            <param name="networks">A list of networks.</param>
            <param name="networkAliases">A list of network-scoped aliases.</param>
            <param name="extraHosts">A list of extra hosts.</param>
            <param name="outputConsumer">The output consumer.</param>
            <param name="waitStrategies">The wait strategies.</param>
            <param name="startupCallback">The startup callback.</param>
            <param name="autoRemove">A value indicating whether Docker removes the container after it exits or not.</param>
            <param name="privileged">A value indicating whether the privileged flag is set or not.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ContainerConfiguration.#ctor(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.CreateContainerParameters})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ContainerConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ContainerConfiguration.#ctor(DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ContainerConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.ContainerConfiguration.#ctor(DotNet.Testcontainers.Configurations.IContainerConfiguration,DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.ContainerConfiguration" /> class.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.AutoRemove">
            <summary>
            Gets a value indicating whether Docker removes the container after it exits or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Privileged">
            <summary>
            Gets a value indicating whether the privileged flag is set or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Image">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.ImagePullPolicy">
            <summary>
            Gets the image pull policy.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Hostname">
            <summary>
            Gets the hostname.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.MacAddress">
            <summary>
            Gets the MAC address.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.WorkingDirectory">
            <summary>
            Gets the working directory.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Entrypoint">
            <summary>
            Gets the entrypoint.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Command">
            <summary>
            Gets the command.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Environments">
            <summary>
            Gets a dictionary of environment variables.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.ExposedPorts">
            <summary>
            Gets a dictionary of exposed ports.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.PortBindings">
            <summary>
            Gets a dictionary of port bindings.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.ResourceMappings">
            <summary>
            Gets a list of resource mappings.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Containers">
            <summary>
            Gets a list of dependent containers.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Mounts">
            <summary>
            Gets a list of dependent mounts.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.Networks">
            <summary>
            Gets a list of dependent networks.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.NetworkAliases">
            <summary>
            Gets a list of network-scoped aliases.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.ExtraHosts">
            <summary>
            Gets a list of extra hosts.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.OutputConsumer">
            <summary>
            Gets the output consumer.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.WaitStrategies">
            <summary>
            Gets the wait strategies.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.ContainerConfiguration.StartupCallback">
            <summary>
            Gets the startup callback.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IContainerConfiguration">
            <summary>
            A container configuration.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.AutoRemove">
            <summary>
            Gets a value indicating whether Docker removes the container after it exits or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Privileged">
            <summary>
            Gets a value indicating whether the privileged flag is set or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Image">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.ImagePullPolicy">
            <summary>
            Gets the image pull policy.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Hostname">
            <summary>
            Gets the hostname.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.MacAddress">
            <summary>
            Gets the MAC address.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.WorkingDirectory">
            <summary>
            Gets the working directory.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Entrypoint">
            <summary>
            Gets the entrypoint.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Command">
            <summary>
            Gets the command.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Environments">
            <summary>
            Gets a dictionary of environment variables.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.ExposedPorts">
            <summary>
            Gets a dictionary of exposed ports.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.PortBindings">
            <summary>
            Gets a dictionary of port bindings.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.ResourceMappings">
            <summary>
            Gets a list of resource mappings.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Containers">
            <summary>
            Gets a list of dependent containers.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Mounts">
            <summary>
            Gets a list of dependent mounts.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.Networks">
            <summary>
            Gets a list of dependent networks.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.NetworkAliases">
            <summary>
            Gets a list of network-scoped aliases.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.ExtraHosts">
            <summary>
            Gets a list of extra hosts.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.OutputConsumer">
            <summary>
            Gets the output consumer.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.WaitStrategies">
            <summary>
            Gets the wait strategies.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IContainerConfiguration.StartupCallback">
            <summary>
            Gets the startup callback.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.FileSystem">
            <summary>
            Indicates the file system for file operations.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.FileSystem.Host">
            <summary>
            The test host file system.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.FileSystem.Container">
            <summary>
            The container file system.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration">
            <summary>
            An image configuration.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.DeleteIfExists">
            <summary>
            Gets a value indicating whether Testcontainers removes an existing image or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.ContextDirectory">
            <summary>
            Gets the context directory.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.Dockerfile">
            <summary>
            Gets the Dockerfile.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.DockerfileDirectory">
            <summary>
            Gets the Dockerfile directory.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.Target">
            <summary>
            Gets the target.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.Image">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.ImageBuildPolicy">
            <summary>
            Gets the image build policy.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IImageFromDockerfileConfiguration.BuildArguments">
            <summary>
            Gets a list of build arguments.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IOperatingSystem">
            <summary>
            Provides host specific operation system information to start Docker container.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IOperatingSystem.DockerEndpointAuthConfig">
            <summary>
            Gets the Docker endpoint authentication configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IOperatingSystem.NormalizePath(System.String)">
            <summary>
            Modifies a string-path that it matches the operating system directory separator.
            </summary>
            <param name="path">Path to normalize.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.INetworkConfiguration">
            <summary>
            A network configuration.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.INetworkConfiguration.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.INetworkConfiguration.Driver">
            <summary>
            Gets the driver.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.INetworkConfiguration.Options">
            <summary>
            Gets a dictionary of network options.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.NetworkDriver">
            <summary>
            Docker network driver.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.NetworkDriver.Bridge">
            <summary>
            Gets network driver bridge.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.NetworkDriver.Host">
            <summary>
            Gets network driver host.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.NetworkDriver.Nat">
            <summary>
            Gets network driver nat.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.NetworkDriver.Value">
            <summary>
            Gets the string representation of the Docker network driver.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IOutputConsumer">
            <summary>
            Receives the output of the Testcontainer.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IOutputConsumer.Enabled">
            <summary>
            Gets a value indicating whether the <see cref="T:DotNet.Testcontainers.Configurations.IOutputConsumer" /> is enabled or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IOutputConsumer.Stdout">
            <summary>
            Gets the stream that receives stdout.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IOutputConsumer.Stderr">
            <summary>
            Gets the stream that receives stderr.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.TestcontainersSettings">
            <summary>
            This class represents the Testcontainers settings.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.DockerHostOverride">
            <summary>
            Gets or sets the Docker host override value.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.DockerSocketOverride">
            <summary>
            Gets or sets the Docker socket override value.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.ResourceReaperEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> is enabled or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.ResourceReaperPrivilegedModeEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> privileged mode is enabled or not.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.ResourceReaperImage">
            <summary>
            Gets or sets the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> image.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.ResourceReaperPublicHostPort">
            <summary>
            Gets or sets the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> public host port.
            </summary>
            <remarks>
            The <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> might not be able to connect to Ryuk on Docker Desktop for Windows.
            Assigning a random port might run into the excluded port range. The container starts, but we cannot establish a TCP connection:
            - https://github.com/docker/for-win/issues/3171.
            - https://github.com/docker/for-win/issues/11584.
            </remarks>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.HubImageNamePrefix">
            <summary>
            Gets or sets a prefix that applies to every image that is pulled from Docker Hub.
            </summary>
            <remarks>
            Please verify that all required images exist in your registry.
            </remarks>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.WaitStrategyRetries">
            <summary>
            Gets or sets the wait strategy retry count.
            </summary>
            <remarks>
            This property represents the default value and applies to all wait strategies.
            Wait strategies can be configured individually using the wait strategy option callback:
            https://dotnet.testcontainers.org/api/wait_strategies/.
            </remarks>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.WaitStrategyInterval">
            <summary>
            Gets or sets the wait strategy interval.
            </summary>
            <remarks>
            This property represents the default value and applies to all wait strategies.
            Wait strategies can be configured individually using the wait strategy option callback:
            https://dotnet.testcontainers.org/api/wait_strategies/.
            </remarks>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.WaitStrategyTimeout">
            <summary>
            Gets or sets the wait strategy timeout.
            </summary>
            <remarks>
            This property represents the default value and applies to all wait strategies.
            Wait strategies can be configured individually using the wait strategy option callback:
            https://dotnet.testcontainers.org/api/wait_strategies/.
            </remarks>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.TestcontainersSettings.OS">
            <summary>
            Gets or sets the host operating system.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.TestcontainersSettings.ExposeHostPortsAsync(System.UInt16,System.Threading.CancellationToken)">
            <summary>
            Exposes the host ports using SSH port forwarding.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the host ports are forwarded.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.TestcontainersSettings.ExposeHostPortsAsync(System.Collections.Generic.IEnumerable{System.UInt16},System.Threading.CancellationToken)">
            <summary>
            Exposes the host ports using SSH port forwarding.
            </summary>
            <param name="ports">The host ports to forward.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the host ports are forwarded.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.Unix">
            <summary>
            Unix operating system.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.Unix.FileMode644">
            <summary>
            Represents the Unix file mode 644, which grants read and write permissions to the user and read permissions to the group and others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.Unix.FileMode666">
            <summary>
            Represents the Unix file mode 666, which grants read and write permissions to the user, group, and others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.Unix.FileMode700">
            <summary>
            Represents the Unix file mode 700, which grants read, write, and execute permissions to the user, and no permissions to the group and others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.Unix.FileMode755">
            <summary>
            Represents the Unix file mode 755, which grants read, write, and execute permissions to the user, and read and execute permissions to the group and others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.Unix.FileMode777">
            <summary>
            Represents the Unix file mode 777, which grants read, write, and execute permissions to the user, group, and others.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Unix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Unix" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Unix.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Unix" /> class.
            </summary>
            <param name="endpoint">The Docker API endpoint.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Unix.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Unix" /> class.
            </summary>
            <param name="endpoint">The Docker API endpoint.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Unix.#ctor(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Unix" /> class.
            </summary>
            <param name="dockerEndpointAuthConfig">The Docker endpoint authentication configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.Unix.Instance">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Configurations.IOperatingSystem" /> instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.Unix.DockerEndpointAuthConfig">
            <summary>
            Gets the Docker endpoint authentication configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Unix.NormalizePath(System.String)">
            <summary>
            Modifies a string-path that it matches the operating system directory separator.
            </summary>
            <param name="path">Path to normalize.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.UnixFileModes">
            <summary>
            Unix file mode.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.None">
            <summary>
            No permissions.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.OtherExecute">
            <summary>
            Execute permission for others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.OtherWrite">
            <summary>
            Write permission for others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.OtherRead">
            <summary>
            Read permission for others.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.GroupExecute">
            <summary>
            Execute permission for group.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.GroupWrite">
            <summary>
            Write permission for group.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.GroupRead">
            <summary>
            Read permission for group.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.UserExecute">
            <summary>
            Execute permission for owner.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.UserWrite">
            <summary>
            Write permission for owner.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.UserRead">
            <summary>
            Read permission for owner.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.StickyBit">
            <summary>
            Sticky bit permission.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.SetGroup">
            <summary>
            Set Group permission.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.UnixFileModes.SetUser">
            <summary>
            Set User permission.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.AccessMode">
            <summary>
            Docker mount access mode.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.AccessMode.ReadOnly">
            <summary>
            Gets access modes ReadOnly.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.AccessMode.ReadWrite">
            <summary>
            Gets access modes ReadWrite.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.AccessMode.Value">
            <summary>
            Gets the string representation of the Docker volume access mode.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IMount">
            <summary>
            This class represents a filesystem mount.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IMount.Type">
            <summary>
            Gets the Docker mount type.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IMount.AccessMode">
            <summary>
            Gets the Docker mount access mode.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IMount.Source">
            <summary>
            Gets the absolute path of a file, a directory or volume to mount on the host system.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IMount.Target">
            <summary>
            Gets the absolute path of a file or directory to mount in the container.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IResourceMapping">
            <summary>
            This class represents a read-only filesystem resource mapping.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceMapping.UserId">
            <summary>
            Gets the user ID to set for the copied resource.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceMapping.GroupId">
            <summary>
            Gets the group ID to set for the copied resource.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IResourceMapping.FileMode">
            <summary>
            Gets the Unix file mode.
            </summary>
            <remarks>
            The <see cref="T:DotNet.Testcontainers.Configurations.Unix" /> class provides access to common constant POSIX file mode permissions.
            </remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IResourceMapping.GetAllBytesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the byte array content of the resource mapping.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the byte array content of the resource mapping has been read.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IVolumeConfiguration">
            <summary>
            A volume configuration.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.IVolumeConfiguration.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.MountType">
            <summary>
            Docker mount type.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.MountType.Bind">
            <summary>
            The 'bind' mount type.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.MountType.Volume">
            <summary>
            The 'volume' mount type.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.MountType.Tmpfs">
            <summary>
            The 'tmpfs' mount type.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.MountType.NamedPipe">
            <summary>
            The 'npipe' mount type.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.MountType.Type">
            <summary>
            Gets the mount type.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy">
            <summary>
            Wait for an HTTP(S) endpoint to return a particular status code.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.UntilAsync(DotNet.Testcontainers.Containers.IContainer)">
            <summary>
            Evaluates the condition asynchronously against the specified container.
            </summary>
            <param name="container">The container instance to check readiness against.</param>
            <returns>A task that returns <c>true</c> when the condition is satisfied; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.ForStatusCode(System.Net.HttpStatusCode)">
            <summary>
            Waits for the status code.
            </summary>
            <param name="statusCode">The expected status code.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.ForStatusCodeMatching(System.Predicate{System.Net.HttpStatusCode})">
            <summary>
            Waits for the status code to pass the predicate.
            </summary>
            <param name="statusCodePredicate">The predicate to test the HTTP response against.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.ForResponseMessageMatching(System.Func{System.Net.Http.HttpResponseMessage,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Waits for the response message to pass the predicate.
            </summary>
            <param name="responseMessagePredicate">The predicate to test the HTTP response against.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.ForPath(System.String)">
            <summary>
            Waits for the path.
            </summary>
            <param name="path">The path to check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.ForPort(System.UInt16)">
            <summary>
            Waits for the port.
            </summary>
            <remarks>
            <see cref="F:DotNet.Testcontainers.Configurations.HttpWaitStrategy.HttpPort" /> default value.
            </remarks>
            <param name="port">The port to check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.UsingTls(System.Boolean)">
            <summary>
            Indicates that the HTTP request use HTTPS.
            </summary>
            <remarks>
            <see cref="F:System.Boolean.FalseString" /> default value.
            </remarks>
            <param name="tlsEnabled">True if the HTTP request use HTTPS, otherwise false.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.UsingHttpMessageHandler(System.Net.Http.HttpMessageHandler)">
            <summary>
            Defines a custom <see cref="T:System.Net.Http.HttpMessageHandler" /> which should be used by the internal <see cref="T:System.Net.Http.HttpClient" />.
            </summary>
            <param name="handler">The handler to pass to the <see cref="T:System.Net.Http.HttpClient" /> when it is created.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.WithMethod(System.Net.Http.HttpMethod)">
            <summary>
            Indicates the HTTP request method.
            </summary>
            <remarks>
            <see cref="P:System.Net.Http.HttpMethod.Get" /> default value.
            </remarks>
            <param name="method">The HTTP method.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.WithBasicAuthentication(System.String,System.String)">
            <summary>
            Adds a basic authentication HTTP header to the HTTP request.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.WithHeader(System.String,System.String)">
            <summary>
            Adds a custom HTTP header to the HTTP request.
            </summary>
            <param name="name">The HTTP header name.</param>
            <param name="value">The HTTP header value.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.WithHeaders(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Adds custom HTTP headers to the HTTP request.
            </summary>
            <param name="headers">A list of HTTP headers.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.HttpWaitStrategy.WithContent(System.Func{System.Net.Http.HttpContent})">
            <summary>
            Sets the HTTP message body of the HTTP request.
            </summary>
            <param name="httpContentCallback">The callback to invoke to create the HTTP message body.</param>
            <remarks>
            It is important to create a new instance of <see cref="T:System.Net.Http.HttpContent" /> within the callback, the HTTP client disposes the content after each call.
            </remarks>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.HttpWaitStrategy" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS">
            <summary>
            Collection of pre-configured strategies to wait until the container is up and running.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.AddCustomWaitStrategy(DotNet.Testcontainers.Configurations.IWaitUntil,System.Action{DotNet.Testcontainers.Configurations.IWaitStrategy})">
            <summary>
            Adds a custom wait strategy to the wait strategies collection.
            </summary>
            <param name="waitUntil">The wait strategy until the container is ready.</param>
            <param name="waitStrategyModifier">The wait strategy modifier to cancel the readiness check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
            <remarks>Already contains <see cref="T:DotNet.Testcontainers.Configurations.UntilContainerIsRunning" /> as default wait strategy.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilCommandIsCompleted(System.String[])">
            <summary>
            Waits until the command is completed successfully.
            </summary>
            <param name="command">The command to be executed.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
            <remarks>
            Does not invoke the operating system command shell.
            Normal shell processing does not happen. Expects the exit code to be 0.
            </remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilCommandIsCompleted(System.String,System.Action{DotNet.Testcontainers.Configurations.IWaitStrategy})">
            <summary>
            Waits until the command is completed successfully.
            </summary>
            <param name="command">The command to be executed.</param>
            <param name="waitStrategyModifier">The wait strategy modifier to cancel the readiness check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
            <remarks>Invokes the operating system command shell. Expects the exit code to be 0.</remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilCommandIsCompleted(System.Collections.Generic.IEnumerable{System.String},System.Action{DotNet.Testcontainers.Configurations.IWaitStrategy})">
            <summary>
            Waits until the command is completed successfully.
            </summary>
            <param name="command">The command to be executed.</param>
            <param name="waitStrategyModifier">The wait strategy modifier to cancel the readiness check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
            <remarks>
            Does not invoke the operating system command shell.
            Normal shell processing does not happen. Expects the exit code to be 0.
            </remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilInternalTcpPortIsAvailable(System.Int32,System.Action{DotNet.Testcontainers.Configurations.IWaitStrategy})">
            <summary>
            Waits until a TCP port is available from within the container itself.
            This verifies that a service inside the container is listening on the specified port.
            </summary>
            <param name="containerPort">The TCP port of the service running inside the container.</param>
            <param name="waitStrategyModifier">The wait strategy modifier to cancel the readiness check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilExternalTcpPortIsAvailable(System.Int32,System.Action{DotNet.Testcontainers.Configurations.IWaitStrategy})">
             <summary>
             Waits until a TCP port is available from the test host to the container.
             This verifies that the port is exposed and reachable externally.
             </summary>
             <remarks>
             This does not necessarily mean that the TCP connection to the service running inside
             the container was successful. For container runtimes like Docker Desktop, Podman, or similar,
             this usually only indicates that the port has been mapped and that a connection could be
             established to the host-side proxy that maps the port.
            
             This wait strategy is particularly useful for container runtimes that may take some time
             to finish setting up port mappings. In some cases, other strategies such as log-based
             readiness checks may indicate readiness before the runtime has fully configured the port
             mapping, leading to connection failures. This strategy helps to avoid that race condition.
             </remarks>
             <param name="containerPort">The TCP port of the service running inside the container.</param>
             <param name="waitStrategyModifier">The wait strategy modifier to cancel the readiness check.</param>
             <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilFileExists(System.String,DotNet.Testcontainers.Configurations.FileSystem,System.Action{DotNet.Testcontainers.Configurations.IWaitStrategy})">
            <summary>
            Waits until the file exists.
            </summary>
            <param name="filePath">The file path to be checked.</param>
            <param name="fileSystem">The file system to be checked.</param>
            <param name="waitStrategyModifier">The wait strategy modifier to cancel the readiness check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilMessageIsLogged(System.String,System.Action{DotNet.Testcontainers.Configurations.IWaitStrategy})">
            <summary>
            Waits until the message is logged.
            </summary>
            <param name="pattern">The regular expression that matches the log message.</param>
            <param name="waitStrategyModifier">The wait strategy modifier to cancel the readiness check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilMessageIsLogged(System.Text.RegularExpressions.Regex,System.Action{DotNet.Testcontainers.Configurations.IWaitStrategy})">
            <summary>
            Waits until the message is logged.
            </summary>
            <param name="pattern">The regular expression that matches the log message.</param>
            <param name="waitStrategyModifier">The wait strategy modifier to cancel the readiness check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilHttpRequestIsSucceeded(System.Func{DotNet.Testcontainers.Configurations.HttpWaitStrategy,DotNet.Testcontainers.Configurations.HttpWaitStrategy},System.Action{DotNet.Testcontainers.Configurations.IWaitStrategy})">
            <summary>
            Waits until the http request is completed successfully.
            </summary>
            <param name="request">The http request to be executed.</param>
            <param name="waitStrategyModifier">The wait strategy modifier to cancel the readiness check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilContainerIsHealthy(System.Int64,System.Action{DotNet.Testcontainers.Configurations.IWaitStrategy})">
            <summary>
            Waits until the container is healthy.
            </summary>
            <param name="failingStreak">The number of attempts before an exception is thrown.</param>
            <param name="waitStrategyModifier">The wait strategy modifier to cancel the readiness check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
            <exception cref="T:System.TimeoutException">Thrown when number of failed operations exceeded <paramref name="failingStreak" />.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.UntilDatabaseIsAvailable(System.Data.Common.DbProviderFactory,System.Action{DotNet.Testcontainers.Configurations.IWaitStrategy})">
            <summary>
            Waits until a successful connection to the database can be established.
            </summary>
            <remarks>
            To use this wait strategy, the container must implement the <see cref="T:DotNet.Testcontainers.Containers.IDatabaseContainer" /> interface.
            </remarks>
            <param name="dbProviderFactory">The <see cref="T:System.Data.Common.DbProviderFactory" /> used to create the database connection.</param>
            <param name="waitStrategyModifier">The wait strategy modifier to cancel the readiness check.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Configurations.IWaitForContainerOS" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitForContainerOS.Build">
            <summary>
            Returns a collection with all configured wait strategies.
            </summary>
            <returns>Returns a list with all configured wait strategies.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IWaitStrategy">
            <summary>
            Represents a wait strategy configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitStrategy.WithMode(DotNet.Testcontainers.Configurations.WaitStrategyMode)">
            <summary>
            Sets the wait strategy mode.
            </summary>
            <param name="mode">The wait strategy mode.</param>
            <returns>The updated instance of the wait strategy.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitStrategy.WithRetries(System.UInt16)">
            <summary>
            Sets the number of retries for the wait strategy.
            </summary>
            <param name="retries">The number of retries.</param>
            <returns>The updated instance of the wait strategy.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitStrategy.WithInterval(System.TimeSpan)">
            <summary>
            Sets the interval between retries for the wait strategy.
            </summary>
            <param name="interval">The interval between retries.</param>
            <returns>The updated instance of the wait strategy.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitStrategy.WithTimeout(System.TimeSpan)">
            <summary>
            Sets the timeout for the wait strategy.
            </summary>
            <param name="timeout">The timeout duration.</param>
            <returns>The updated instance of the wait strategy.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IWaitUntil">
            <summary>
            Defines a condition that is repeatedly evaluated until it becomes true.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitUntil.UntilAsync(DotNet.Testcontainers.Containers.IContainer)">
            <summary>
            Evaluates the condition asynchronously against the specified container.
            </summary>
            <param name="container">The container instance to check readiness against.</param>
            <returns>A task that returns <c>true</c> when the condition is satisfied; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.IWaitWhile">
            <summary>
            Defines a condition that is repeatedly evaluated while it remains true.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.IWaitWhile.WhileAsync(DotNet.Testcontainers.Containers.IContainer)">
            <summary>
            Evaluates the condition asynchronously against the specified container.
            </summary>
            <param name="container">The container instance to check readiness against.</param>
            <returns>A task that returns <c>true</c> while the condition holds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.WaitStrategy">
            <summary>
            Represents a wait strategy configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.WaitStrategy" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitStrategy.#ctor(DotNet.Testcontainers.Configurations.IWaitWhile)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.WaitStrategy" /> class.
            </summary>
            <param name="waitWhile">The wait while condition to be used in the strategy.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitStrategy.#ctor(DotNet.Testcontainers.Configurations.IWaitUntil)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.WaitStrategy" /> class.
            </summary>
            <param name="waitUntil">The wait until condition to be used in the strategy.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.WaitStrategy.Mode">
            <summary>
            Gets the wait strategy mode.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.WaitStrategy.Retries">
            <summary>
            Gets the number of retries.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.WaitStrategy.Interval">
            <summary>
            Gets the interval between retries.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.WaitStrategy.Timeout">
            <summary>
            Gets the timeout.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitStrategy.WithMode(DotNet.Testcontainers.Configurations.WaitStrategyMode)">
            <summary>
            Sets the wait strategy mode.
            </summary>
            <param name="mode">The wait strategy mode.</param>
            <returns>The updated instance of the wait strategy.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitStrategy.WithRetries(System.UInt16)">
            <summary>
            Sets the number of retries for the wait strategy.
            </summary>
            <param name="retries">The number of retries.</param>
            <returns>The updated instance of the wait strategy.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitStrategy.WithInterval(System.TimeSpan)">
            <summary>
            Sets the interval between retries for the wait strategy.
            </summary>
            <param name="interval">The interval between retries.</param>
            <returns>The updated instance of the wait strategy.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitStrategy.WithTimeout(System.TimeSpan)">
            <summary>
            Sets the timeout for the wait strategy.
            </summary>
            <param name="timeout">The timeout duration.</param>
            <returns>The updated instance of the wait strategy.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitStrategy.WhileAsync(DotNet.Testcontainers.Containers.IContainer,System.Threading.CancellationToken)">
            <summary>
            Executes the wait strategy while the container satisfies the condition.
            </summary>
            <param name="container">The container to check the condition for.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation, returning false if the container satisfies the condition; otherwise, true.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitStrategy.UntilAsync(DotNet.Testcontainers.Containers.IContainer,System.Threading.CancellationToken)">
            <summary>
            Executes the wait strategy until the container satisfies the condition.
            </summary>
            <param name="container">The container to check the condition for.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task representing the asynchronous operation, returning true if the container satisfies the condition; otherwise, false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitStrategy.WaitWhileAsync(System.Func{System.Threading.Tasks.Task{System.Boolean}},System.TimeSpan,System.TimeSpan,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits asynchronously until the specified condition returns false or until a timeout occurs.
            </summary>
            <remarks>
            Zero or a negative value for <paramref name="retries" /> will run the readiness check infinitely until it becomes false.
            </remarks>
            <param name="wait">A function that represents the asynchronous condition to wait for.</param>
            <param name="interval">The time interval between consecutive evaluations of the condition.</param>
            <param name="timeout">The maximum duration to wait for the condition to become false.</param>
            <param name="retries">The number of retries to run for the condition to become false.</param>
            <param name="ct">The optional cancellation token to cancel the waiting operation.</param>
            <exception cref="T:System.TimeoutException">Thrown when the timeout expires.</exception>
            <exception cref="T:DotNet.Testcontainers.Configurations.RetryLimitExceededException">Thrown when the number of retries is exceeded.</exception>
            <returns>A task that represents the asynchronous block operation.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.WaitStrategy.WaitUntilAsync(System.Func{System.Threading.Tasks.Task{System.Boolean}},System.TimeSpan,System.TimeSpan,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits asynchronously until the specified condition returns true or until a timeout occurs.
            </summary>
            <remarks>
            Zero or a negative value for <paramref name="retries" /> will run the readiness check infinitely until it becomes true.
            </remarks>
            <param name="wait">A function that represents the asynchronous condition to wait for.</param>
            <param name="interval">The time interval between consecutive evaluations of the condition.</param>
            <param name="timeout">The maximum duration to wait for the condition to become true.</param>
            <param name="retries">The number of retries to run for the condition to become true.</param>
            <param name="ct">The optional cancellation token to cancel the waiting operation.</param>
            <exception cref="T:System.TimeoutException">Thrown when the timeout expires.</exception>
            <exception cref="T:DotNet.Testcontainers.Configurations.RetryLimitExceededException">Thrown when the number of retries is exceeded.</exception>
            <returns>A task that represents the asynchronous block operation.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.WaitStrategyMode">
            <summary>
            Represents the execution mode for a wait strategy.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.WaitStrategyMode.Running">
            <summary>
            Indicates that the container is expected to be in the <c>Running</c> state.
            </summary>
            <remarks>
            When this mode is used, the library verifies that the container is running. If
            the container is not running, it collects the container's <c>stdout</c> and
            <c>stderr</c> logs and throws a <see cref="T:DotNet.Testcontainers.Containers.ContainerNotRunningException" /> exception.
            </remarks>
        </member>
        <member name="F:DotNet.Testcontainers.Configurations.WaitStrategyMode.OneShot">
            <summary>
            Executes the wait strategy without requiring the container to be running.
            </summary>
            <remarks>
            This mode does not check the container's running state.
            </remarks>
        </member>
        <member name="T:DotNet.Testcontainers.Configurations.Windows">
            <summary>
            Windows operating system.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Windows.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Windows" /> class.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Windows.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Windows" /> class.
            </summary>
            <param name="endpoint">The Docker API endpoint.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Windows.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Windows" /> class.
            </summary>
            <param name="endpoint">The Docker API endpoint.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Windows.#ctor(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Configurations.Windows" /> class.
            </summary>
            <param name="dockerEndpointAuthConfig">The Docker endpoint authentication configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.Windows.Instance">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Configurations.IOperatingSystem" /> instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Configurations.Windows.DockerEndpointAuthConfig">
            <summary>
            Gets the Docker endpoint authentication configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Configurations.Windows.NormalizePath(System.String)">
            <summary>
            Modifies a string-path that it matches the operating system directory separator.
            </summary>
            <param name="path">Path to normalize.</param>
            <returns>Normalized path.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.ContainerNotRunningException">
            <summary>
            Represents an exception that is thrown when a container is not running anymore,
            and exited unexpectedly.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ContainerNotRunningException.#ctor(System.String,System.String,System.String,System.Int64,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.ContainerNotRunningException" /> class.
            </summary>
            <param name="id">The container id.</param>
            <param name="stdout">The stdout.</param>
            <param name="stderr">The stderr.</param>
            <param name="exitCode">The exit code.</param>
            <param name="exception">The inner exception.</param>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.DockerContainer">
            <summary>
            A container instance.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.#ctor(DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.DockerContainer" /> class.
            </summary>
            <param name="configuration">The container configuration.</param>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Creating">
            <summary>
            Subscribes to the creating event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Starting">
            <summary>
            Subscribes to the starting event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Stopping">
            <summary>
            Subscribes to the stopping event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Pausing">
            <summary>
            Subscribes to the pausing event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Unpausing">
            <summary>
            Subscribes to the unpausing event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Created">
            <summary>
            Subscribes to the created event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Started">
            <summary>
            Subscribes to the started event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Stopped">
            <summary>
            Subscribes to the stopped event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Paused">
            <summary>
            Subscribes to the paused event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.DockerContainer.Unpaused">
            <summary>
            Subscribes to the unpaused event.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.CreatedTime">
            <summary>
            Gets the created timestamp.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.StartedTime">
            <summary>
            Gets the started timestamp.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.StoppedTime">
            <summary>
            Gets the stopped timestamp.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.PausedTime">
            <summary>
            Gets the paused timestamp.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.UnpausedTime">
            <summary>
            Gets the unpaused timestamp.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.Id">
            <summary>
            Gets the container id.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.Name">
            <summary>
            Gets the container name.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.IpAddress">
            <summary>
            Gets the container IP address.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.MacAddress">
            <summary>
            Gets the container MAC address.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.Hostname">
            <summary>
            Gets the container hostname.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.Image">
            <summary>
            Gets the container image.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.State">
            <summary>
            Gets the container state.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.Health">
            <summary>
            Gets the container health status.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.DockerContainer.HealthCheckFailingStreak">
            <summary>
            Gets the container health check failing streak.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.GetMappedPublicPort">
            <summary>
            Resolves the first public assigned host port.
            </summary>
            <returns>Returns the first public assigned host port.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.GetMappedPublicPort(System.Int32)">
            <summary>
            Resolves the public assigned host port.
            </summary>
            <remarks>
            Resolves the public assigned host port for the TCP protocol. To resolve a specific protocol, use <see cref="M:DotNet.Testcontainers.Containers.IContainer.GetMappedPublicPort(System.String)" />.
            </remarks>
            <param name="containerPort">The container port.</param>
            <returns>Returns the public assigned host port.</returns>
            <exception cref="T:System.InvalidOperationException">Container has not been created, or no mapped port was found.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.GetMappedPublicPort(System.String)">
            <summary>
            Resolves the public assigned host port.
            </summary>
            <remarks>
            Resolves the public assigned host port for the TCP protocol. To resolve a specific protocol, use <see cref="M:DotNet.Testcontainers.Containers.IContainer.GetMappedPublicPort(System.String)" />.
            </remarks>
            <param name="containerPort">The container port.</param>
            <returns>Returns the public assigned host port.</returns>
            <exception cref="T:System.InvalidOperationException">Container has not been created, or no mapped port was found.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.GetMappedPublicPorts">
            <summary>
            Resolves all public assigned host ports.
            </summary>
            <returns>Returns all public assigned host ports.</returns>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.GetExitCodeAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the container exit code.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Returns the container exit code.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.GetLogsAsync(System.DateTime,System.DateTime,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the container logs.
            </summary>
            <param name="since">Only logs since this time.</param>
            <param name="until">Only logs until this time.</param>
            <param name="timestampsEnabled">Determines whether every log line contains a timestamp or not.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Returns the container logs.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the container.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been started.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when a Docker API call gets canceled.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown when a Testcontainers task gets canceled.</exception>
            <exception cref="T:System.TimeoutException">Thrown when the wait strategy task gets canceled or the timeout expires.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the container.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been stopped.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when a Docker API call gets canceled.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown when a Testcontainers task gets canceled.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.PauseAsync(System.Threading.CancellationToken)">
            <summary>
            Pauses the container.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been paused.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when a Docker API call gets canceled.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown when a Testcontainers task gets canceled.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.UnpauseAsync(System.Threading.CancellationToken)">
            <summary>
            Unpauses the container.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been unpaused.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when a Docker API call gets canceled.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown when a Testcontainers task gets canceled.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.CopyAsync(System.Byte[],System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host file to the container.
            </summary>
            <param name="fileContent">The byte array content of the file.</param>
            <param name="filePath">The target file path to copy the file to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.CopyAsync(System.String,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host directory or file to the container.
            </summary>
            <param name="source">The source directory or file to be copied.</param>
            <param name="target">The target directory path to copy the files to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the directory or file has been copied.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.CopyAsync(System.IO.FileInfo,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host file to the container.
            </summary>
            <param name="source">The source file to be copied.</param>
            <param name="target">The target directory path to copy the file to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the file has been copied.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.CopyAsync(System.IO.DirectoryInfo,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host directory to the container.
            </summary>
            <param name="source">The source directory to be copied.</param>
            <param name="target">The target directory path to copy the files to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the directory has been copied.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.ReadFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Reads a file from the container.
            </summary>
            <param name="filePath">An absolute path or a name value within the container.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the file has been read.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.ExecAsync(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Executes a command in the container.
            </summary>
            <param name="command">Shell command.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the shell command has been executed.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.DisposeAsyncCore">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</summary><returns>A task that represents the asynchronous dispose operation.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.UnsafeCreateAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the resource.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the resource has been created.</returns>
            <remarks>
            Only the public members <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StartAsync(System.Threading.CancellationToken)" /> and <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StopAsync(System.Threading.CancellationToken)" /> are thread-safe for now.
            </remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.UnsafeDeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the resource.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the resource has been deleted.</returns>
            <remarks>
            Only the public members <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StartAsync(System.Threading.CancellationToken)" /> and <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StopAsync(System.Threading.CancellationToken)" /> are thread-safe for now.
            </remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.UnsafeStartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the container.
            </summary>
            <remarks>
            Only the public members <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StartAsync(System.Threading.CancellationToken)" /> and <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StopAsync(System.Threading.CancellationToken)" /> are thread-safe for now.
            </remarks>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been started.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.UnsafeStopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the container.
            </summary>
            <remarks>
            Only the public members <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StartAsync(System.Threading.CancellationToken)" /> and <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.StopAsync(System.Threading.CancellationToken)" /> are thread-safe for now.
            </remarks>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been stopped.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.UnsafePauseAsync(System.Threading.CancellationToken)">
            <summary>
            Pauses the container.
            </summary>
            <remarks>
            Only the public members <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.PauseAsync(System.Threading.CancellationToken)" /> and <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.UnpauseAsync(System.Threading.CancellationToken)" /> are thread-safe for now.
            </remarks>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been paused.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.UnsafeUnpauseAsync(System.Threading.CancellationToken)">
            <summary>
            Unpauses the container.
            </summary>
            <remarks>
            Only the public members <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.PauseAsync(System.Threading.CancellationToken)" /> and <see cref="M:DotNet.Testcontainers.Containers.DockerContainer.UnpauseAsync(System.Threading.CancellationToken)" /> are thread-safe for now.
            </remarks>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been unpaused.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.DockerContainer.Exists">
            <summary>
            Checks whether the resources exist or not.
            </summary>
            <returns>True if the resource exists; otherwise, false.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.ExecFailedException">
            <summary>
            Represents an exception that is thrown when executing a command inside a
            running container fails.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ExecFailedException.#ctor(DotNet.Testcontainers.Containers.ExecResult)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.ExecFailedException" /> class.
            </summary>
            <param name="execResult">The result of the failed command.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ExecFailedException.ExecResult">
            <summary>
            Gets the result of the failed command.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.ExecResult">
            <summary>
            A command exec result.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ExecResult.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.ExecResult" /> struct.
            </summary>
            <param name="stdout">The stdout output.</param>
            <param name="stderr">The stderr output.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ExecResult.Stdout">
            <summary>
            Gets the stdout output.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ExecResult.Stderr">
            <summary>
            Gets the stderr output.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ExecResult.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.ExecResultExtensions">
            <summary>
            Extension methods for working with <see cref="T:DotNet.Testcontainers.Containers.ExecResult" /> instances.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ExecResultExtensions.ThrowOnFailure(System.Threading.Tasks.Task{DotNet.Testcontainers.Containers.ExecResult},System.Int64[])">
            <summary>
            Awaits the <see cref="T:System.Threading.Tasks.Task`1" /> and throws an exception if the result's exit code is not successful.
            </summary>
            <param name="execTask">The task returning an <see cref="T:DotNet.Testcontainers.Containers.ExecResult" />.</param>
            <param name="successExitCodes">A list of exit codes that should be treated as successful. If none are provided, only exit code <c>0</c> is treated as successful.</param>
            <returns>The <see cref="T:DotNet.Testcontainers.Containers.ExecResult" /> if the exit code is in the list of success exit codes.</returns>
            <exception cref="T:DotNet.Testcontainers.Containers.ExecFailedException">Thrown if the exit code is not in the list of success exit codes.</exception>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.IContainer">
            <summary>
            A container instance.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Creating">
            <summary>
            Subscribes to the creating event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Starting">
            <summary>
            Subscribes to the starting event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Stopping">
            <summary>
            Subscribes to the stopping event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Pausing">
            <summary>
            Subscribes to the pausing event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Unpausing">
            <summary>
            Subscribes to the unpausing event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Created">
            <summary>
            Subscribes to the created event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Started">
            <summary>
            Subscribes to the started event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Stopped">
            <summary>
            Subscribes to the stopped event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Paused">
            <summary>
            Subscribes to the paused event.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.IContainer.Unpaused">
            <summary>
            Subscribes to the unpaused event.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.CreatedTime">
            <summary>
            Gets the created timestamp.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.StartedTime">
            <summary>
            Gets the started timestamp.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.StoppedTime">
            <summary>
            Gets the stopped timestamp.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.PausedTime">
            <summary>
            Gets the paused timestamp.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.UnpausedTime">
            <summary>
            Gets the unpaused timestamp.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.Id">
            <summary>
            Gets the container id.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.Name">
            <summary>
            Gets the container name.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.IpAddress">
            <summary>
            Gets the container IP address.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.MacAddress">
            <summary>
            Gets the container MAC address.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.Hostname">
            <summary>
            Gets the container hostname.
            </summary>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.Image">
            <summary>
            Gets the container image.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.State">
            <summary>
            Gets the container state.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.Health">
            <summary>
            Gets the container health status.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.IContainer.HealthCheckFailingStreak">
            <summary>
            Gets the container health check failing streak.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.GetMappedPublicPort">
            <summary>
            Resolves the first public assigned host port.
            </summary>
            <returns>Returns the first public assigned host port.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.GetMappedPublicPort(System.Int32)">
            <summary>
            Resolves the public assigned host port.
            </summary>
            <remarks>
            Resolves the public assigned host port for the TCP protocol. To resolve a specific protocol, use <see cref="M:DotNet.Testcontainers.Containers.IContainer.GetMappedPublicPort(System.String)" />.
            </remarks>
            <param name="containerPort">The container port.</param>
            <returns>Returns the public assigned host port.</returns>
            <exception cref="T:System.InvalidOperationException">Container has not been created, or no mapped port was found.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.GetMappedPublicPort(System.String)">
            <summary>
            Resolves the public assigned host port.
            </summary>
            <remarks>
            Append /tcp|udp|sctp to <paramref name="containerPort" /> to resolve the public assigned host port for a specific protocol e.g. "53/udp".
            </remarks>
            <param name="containerPort">The container port.</param>
            <returns>Returns the public assigned host port.</returns>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.GetMappedPublicPorts">
            <summary>
            Resolves all public assigned host ports.
            </summary>
            <returns>Returns all public assigned host ports.</returns>
            <exception cref="T:System.InvalidOperationException">Container has not been created.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.GetExitCodeAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the container exit code.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Returns the container exit code.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.GetLogsAsync(System.DateTime,System.DateTime,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the container logs.
            </summary>
            <param name="since">Only logs since this time.</param>
            <param name="until">Only logs until this time.</param>
            <param name="timestampsEnabled">Determines whether every log line contains a timestamp or not.</param>
            <param name="ct">Cancellation token.</param>
            <returns>Returns the container logs.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the container.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been started.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when a Docker API call gets canceled.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown when a Testcontainers task gets canceled.</exception>
            <exception cref="T:System.TimeoutException">Thrown when the wait strategy task gets canceled or the timeout expires.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the container.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been stopped.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when a Docker API call gets canceled.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown when a Testcontainers task gets canceled.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.PauseAsync(System.Threading.CancellationToken)">
            <summary>
            Pauses the container.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been paused.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when a Docker API call gets canceled.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown when a Testcontainers task gets canceled.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.UnpauseAsync(System.Threading.CancellationToken)">
            <summary>
            Unpauses the container.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the container has been unpaused.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when a Docker API call gets canceled.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown when a Testcontainers task gets canceled.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.CopyAsync(System.Byte[],System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host file to the container.
            </summary>
            <param name="fileContent">The byte array content of the file.</param>
            <param name="filePath">The target file path to copy the file to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.CopyAsync(System.String,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host directory or file to the container.
            </summary>
            <param name="source">The source directory or file to be copied.</param>
            <param name="target">The target directory path to copy the files to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the directory or file has been copied.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.CopyAsync(System.IO.DirectoryInfo,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host directory to the container.
            </summary>
            <param name="source">The source directory to be copied.</param>
            <param name="target">The target directory path to copy the files to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the directory has been copied.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.CopyAsync(System.IO.FileInfo,System.String,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Copies a test host file to the container.
            </summary>
            <param name="source">The source file to be copied.</param>
            <param name="target">The target directory path to copy the file to.</param>
            <param name="uid">The user ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="gid">The group ID to set for the copied file or directory. Defaults to 0 (root).</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the file has been copied.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.ReadFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Reads a file from the container.
            </summary>
            <param name="filePath">An absolute path or a name value within the container.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the file has been read.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IContainer.ExecAsync(System.Collections.Generic.IList{System.String},System.Threading.CancellationToken)">
            <summary>
            Executes a command in the container.
            </summary>
            <param name="command">Shell command.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the shell command has been executed.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.IDatabaseContainer">
            <summary>
            Represents a database container instance that can be accessed with an ADO.NET provider.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.IDatabaseContainer.GetConnectionString">
            <summary>
            Gets the database connection string.
            </summary>
            <returns>The database connection string.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.ResourceReaper">
            <summary>
            The Resource Reaper takes care of the remaining Docker resources and removes them: https://dotnet.testcontainers.org/api/resource-reaper/.
            </summary>
        </member>
        <member name="E:DotNet.Testcontainers.Containers.ResourceReaper.StateChanged">
            <summary>
            Occurs when a Resource Reaper state has changed.
            </summary>
            <remarks>
            It emits state changes to uninitialized instances too.
            </remarks>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ResourceReaper.DefaultSessionId">
            <summary>
            Gets the default <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> session id.
            </summary>
            <remarks>
            The default <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> will start either on <see cref="M:DotNet.Testcontainers.Containers.ResourceReaper.GetAndStartDefaultAsync(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration,Microsoft.Extensions.Logging.ILogger,System.Boolean,System.Threading.CancellationToken)" />
            or if a <see cref="T:DotNet.Testcontainers.Containers.IContainer" /> is configured with <see cref="M:DotNet.Testcontainers.Builders.IAbstractBuilder`3.WithCleanUp(System.Boolean)" />.
            </remarks>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ResourceReaper.IsUnavailable">
            <summary>
            Gets a value indicating whether the default <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> instance is running and available.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ResourceReaper.SessionId">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> session id.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ResourceReaper.GetAndStartDefaultAsync(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration,Microsoft.Extensions.Logging.ILogger,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Starts and returns the default <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> instance.
            </summary>
            <param name="dockerEndpointAuthConfig">The Docker endpoint authentication configuration.</param>
            <param name="logger">The logger.</param>
            <param name="isWindowsEngineEnabled">Determines whether the Windows engine is enabled or not.</param>
            <param name="ct">The cancellation token to cancel the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> initialization.</param>
            <returns>Task that completes when the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> has been started.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ResourceReaper.DisposeAsync">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</summary><returns>A task that represents the asynchronous dispose operation.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.ResourceReaperState">
            <summary>
            Resource Reaper states.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.ResourceReaperState.Created">
            <summary>
            <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> is created.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.ResourceReaperState.InitializingConnection">
            <summary>
            <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> initializes the TCP connection to Ryuk.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.ResourceReaperState.MaintainingConnection">
            <summary>
            <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> maintains the TCP connection to Ryuk.
            </summary>
            <remarks>
            <see cref="M:DotNet.Testcontainers.Containers.ResourceReaper.GetAndStartNewAsync(DotNet.Testcontainers.Configurations.IDockerEndpointAuthenticationConfiguration,DotNet.Testcontainers.Images.IImage,DotNet.Testcontainers.Configurations.IMount,Microsoft.Extensions.Logging.ILogger,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)" /> will complete now.
            </remarks>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.ResourceReaperState.ConnectionTerminated">
            <summary>
            The connection to Ryuk has been terminated and Ryuk is going to clean up all associated Docker resources.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.ResourceReaperStateEventArgs">
            <summary>
            Provides data for the <see cref="E:DotNet.Testcontainers.Containers.ResourceReaper.StateChanged" /> event.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.ResourceReaperStateEventArgs.#ctor(DotNet.Testcontainers.Containers.ResourceReaper,DotNet.Testcontainers.Containers.ResourceReaperState)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaperStateEventArgs" /> class.
            </summary>
            <param name="resourceReaper">The Resource Reaper instance.</param>
            <param name="resourceReaperState">The Resource Reaper state.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ResourceReaperStateEventArgs.Instance">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.ResourceReaperStateEventArgs.State">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.Containers.ResourceReaper" /> state.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.SocatBuilder">
            <summary>
            An abstract fluent Docker container builder.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.SocatBuilder" /> class.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.SocatBuilder.DockerResourceConfiguration">
            <summary>
            Gets the Docker resource configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatBuilder.WithTarget(System.Int32,System.String)">
            <summary>
            Sets the Socat target.
            </summary>
            <param name="exposedPort">The Socat exposed port.</param>
            <param name="host">The Socat target host.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Containers.SocatBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatBuilder.WithTarget(System.Int32,System.String,System.Int32)">
            <summary>
            Sets the Socat target.
            </summary>
            <param name="exposedPort">The Socat exposed port.</param>
            <param name="host">The Socat target host.</param>
            <param name="internalPort">The Socat target port.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Containers.SocatBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatBuilder.Build">
            <summary>
            Builds an instance of <see cref="T:DotNet.Testcontainers.Containers.SocatContainer" /> with the given resource configuration.
            </summary>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Containers.SocatContainer" />.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatBuilder.Init">
            <summary>
            Initializes the fluent Docker resource builder.
            </summary>
            <remarks>
            Due to the immutable design decision the configuration cannot be kept during the object instantiation.
            To keep the configuration override <see cref="P:DotNet.Testcontainers.Builders.AbstractBuilder`4.DockerResourceConfiguration" />.
            </remarks>
            <example>
              <code>
              public sealed class CustomBuilder : AbstractBuilder&lt;CustomBuilder, IContainer, IContainerConfiguration&gt;
              {
                public CustomBuilder() : base(new ContainerConfiguration())
                {
                  this.DockerResourceConfiguration = this.Init().DockerResourceConfiguration;
                }
              <br />
                protected override IContainerConfiguration DockerResourceConfiguration { get; }
              <br />
                protected override CustomBuilder Init()
                {
                  return base.Init().WithLabel("custom.builder", bool.TrueString.ToLowerInvariant());
                }
              }
              </code>
            </example>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Containers.SocatBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatBuilder.Validate">
            <summary>
            Validates the Docker resource configuration.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when a mandatory Docker resource configuration is not set.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatBuilder.Clone(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.CreateContainerParameters})">
            <summary>
            Clones the Docker resource builder configuration.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Containers.SocatBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatBuilder.Clone(DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Clones the Docker resource builder configuration.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Containers.SocatBuilder" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatBuilder.Merge(DotNet.Testcontainers.Containers.SocatConfiguration,DotNet.Testcontainers.Containers.SocatConfiguration)">
            <summary>
            Merges the Docker resource builder configuration.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
            <returns>A configured instance of <see cref="T:DotNet.Testcontainers.Containers.SocatBuilder" />.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.SocatConfiguration">
            <summary>
            A container configuration.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatConfiguration.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.SocatConfiguration" /> class.
            </summary>
            <param name="targets">A list of target addresses.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatConfiguration.#ctor(DotNet.Testcontainers.Configurations.IResourceConfiguration{Docker.DotNet.Models.CreateContainerParameters})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.SocatConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatConfiguration.#ctor(DotNet.Testcontainers.Configurations.IContainerConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.SocatConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatConfiguration.#ctor(DotNet.Testcontainers.Containers.SocatConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.SocatConfiguration" /> class.
            </summary>
            <param name="resourceConfiguration">The Docker resource configuration.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatConfiguration.#ctor(DotNet.Testcontainers.Containers.SocatConfiguration,DotNet.Testcontainers.Containers.SocatConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.SocatConfiguration" /> class.
            </summary>
            <param name="oldValue">The old Docker resource configuration.</param>
            <param name="newValue">The new Docker resource configuration.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.SocatConfiguration.Targets">
            <summary>
            Gets a list of target addresses.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.SocatContainer">
            <summary>
            A container instance.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.SocatContainer.#ctor(DotNet.Testcontainers.Containers.SocatConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.SocatContainer" /> class.
            </summary>
            <param name="configuration">The container configuration.</param>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.TarOutputMemoryStream">
            <summary>
            Represent a tar archive file.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.TarOutputMemoryStream.#ctor(System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.TarOutputMemoryStream" /> class.
            </summary>
            <param name="targetDirectoryPath">The target directory path to extract the files to.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.TarOutputMemoryStream.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Containers.TarOutputMemoryStream" /> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Containers.TarOutputMemoryStream.ContentLength">
            <summary>
            Gets the content length.
            </summary>
            <remarks>
            The initial tar output stream length is 10240 bytes (SharpZipLib). The stream
            length does not correspond to the actual content's length.
            </remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.TarOutputMemoryStream.AddAsync(DotNet.Testcontainers.Configurations.IResourceMapping,System.Threading.CancellationToken)">
            <summary>
            Adds the content of an implementation of <see cref="T:DotNet.Testcontainers.Configurations.IResourceMapping" /> to the archive.
            </summary>
            <param name="resourceMapping">The resource mapping to add to the archive.</param>
            <param name="ct">Cancellation token.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.TarOutputMemoryStream.AddAsync(System.IO.FileInfo,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Adds a file to the archive.
            </summary>
            <param name="file">The file to add to the archive.</param>
            <param name="uid">The user ID to set for the copied file or directory.</param>
            <param name="gid">The group ID to set for the copied file or directory.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
            <returns>A task that completes when the file has been added to the archive.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.TarOutputMemoryStream.AddAsync(System.IO.DirectoryInfo,System.Boolean,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Adds a directory to the archive.
            </summary>
            <param name="directory">The directory to add to the archive.</param>
            <param name="recurse">A value indicating whether the current directory and all its subdirectories are included or not.</param>
            <param name="uid">The user ID to set for the copied file or directory.</param>
            <param name="gid">The group ID to set for the copied file or directory.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Containers.TarOutputMemoryStream.AddAsync(System.IO.DirectoryInfo,System.IO.FileInfo,System.UInt32,System.UInt32,DotNet.Testcontainers.Configurations.UnixFileModes,System.Threading.CancellationToken)">
            <summary>
            Adds a file to the archive.
            </summary>
            <param name="directory">The root directory of the file to add to the archive.</param>
            <param name="file">The file to add to the archive.</param>
            <param name="uid">The user ID to set for the copied file or directory.</param>
            <param name="gid">The group ID to set for the copied file or directory.</param>
            <param name="fileMode">The POSIX file mode permission.</param>
            <param name="ct">Cancellation token.</param>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.TestcontainersHealthStatus">
            <summary>
            Docker container health status.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersHealthStatus.Undefined">
            <summary>
            Docker container has not been created.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersHealthStatus.None">
            <summary>
            Docker container has no health check assigned.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersHealthStatus.Starting">
            <summary>
            Docker container is starting.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersHealthStatus.Healthy">
            <summary>
            Docker container is healthy.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersHealthStatus.Unhealthy">
            <summary>
            Docker container is unhealthy.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Containers.TestcontainersStates">
            <summary>
            Docker container states.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Undefined">
            <summary>
            Docker container has not been created.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Created">
            <summary>
            Docker container is created.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Restarting">
            <summary>
            Docker container is restarting.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Running">
            <summary>
            Docker container is running.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Paused">
            <summary>
            Docker container is paused.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Exited">
            <summary>
            Docker container is exited.
            </summary>
        </member>
        <member name="F:DotNet.Testcontainers.Containers.TestcontainersStates.Dead">
            <summary>
            Docker container is dead.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Guard">
            <summary>
            A guard to determine if one or more conditions are not met.
            </summary>
            <summary>
            A guard collection of nullability preconditions.
            </summary>
            <summary>
            A guard collection of string preconditions.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.Argument``1(``0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <typeparam name="TType">The type.</typeparam>
            <returns>A new instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Guard.ArgumentInfo`1">
            <summary>
            An argument.
            </summary>
            <typeparam name="TType">The type.</typeparam>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.ArgumentInfo`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:DotNet.Testcontainers.Guard.ArgumentInfo`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Guard.ArgumentInfo`1.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.ArgumentInfo`1.HasValue">
            <summary>
            Checks whether the argument has a value or not.
            </summary>
            <returns>True if the argument has a value; otherwise, false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.Null``1(DotNet.Testcontainers.Guard.ArgumentInfo{``0}@,System.String)">
            <summary>
            Ensures the argument value is null.
            </summary>
            <param name="argument">The argument.</param>
            <param name="exceptionMessage">The exception message.</param>
            <typeparam name="TType">The type.</typeparam>
            <returns>An instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the condition is not met.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.NotNull``1(DotNet.Testcontainers.Guard.ArgumentInfo{``0}@,System.String)">
            <summary>
            Ensures the argument value is not null.
            </summary>
            <param name="argument">The argument.</param>
            <param name="exceptionMessage">The exception message.</param>
            <typeparam name="TType">The type.</typeparam>
            <returns>An instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the condition is not met.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.ThrowIf``1(DotNet.Testcontainers.Guard.ArgumentInfo{``0}@,System.Func{DotNet.Testcontainers.Guard.ArgumentInfo{``0},System.Boolean},System.Func{DotNet.Testcontainers.Guard.ArgumentInfo{``0},System.Exception})">
            <summary>
            Ensures the argument value not pass the predicate.
            </summary>
            <param name="argument">The argument.</param>
            <param name="condition">The condition that raises the exception.</param>
            <param name="ifClause">The function to invoke to create the exception object.</param>
            <typeparam name="TType">The type.</typeparam>
            <returns>An instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the condition is not met.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.Empty(DotNet.Testcontainers.Guard.ArgumentInfo{System.String}@,System.String)">
            <summary>
            Ensures the argument value is empty.
            </summary>
            <param name="argument">The argument.</param>
            <param name="exceptionMessage">The exception message.</param>
            <returns>An instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the condition is not met.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.NotEmpty(DotNet.Testcontainers.Guard.ArgumentInfo{System.String}@,System.String)">
            <summary>
            Ensures the argument value is not empty.
            </summary>
            <param name="argument">The argument.</param>
            <param name="exceptionMessage">The exception message.</param>
            <returns>An instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the condition is not met.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Guard.NotUppercase(DotNet.Testcontainers.Guard.ArgumentInfo{System.String}@,System.String)">
            <summary>
            Ensures the argument value does not contain uppercase characters.
            </summary>
            <param name="argument">The argument.</param>
            <param name="exceptionMessage">The exception message.</param>
            <returns>An instance of the <see cref="T:DotNet.Testcontainers.Guard.ArgumentInfo`1" /> struct.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the condition is not met.</exception>
        </member>
        <member name="T:DotNet.Testcontainers.IFutureResource">
            <summary>
            A future resource instance.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.IFutureResource.CreateAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the resource.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the resource has been created.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.IFutureResource.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the resource.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the resource has been deleted.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Images.DockerImage">
            <summary>
            An image instance.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerImage.#ctor(DotNet.Testcontainers.Images.IImage)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Images.DockerImage" /> class.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Images.DockerImage" /> class.
            </summary>
            <param name="image">The image.</param>
            <example><c>fedora/httpd:version1.0</c> where <c>fedora/httpd</c> is the repository and <c>version1.0</c> the tag.</example>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerImage.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Images.DockerImage" /> class.
            </summary>
            <param name="repository">The repository.</param>
            <param name="registry">The registry.</param>
            <param name="tag">The tag.</param>
            <param name="digest">The digest.</param>
            <param name="hubImageNamePrefix">The Docker Hub image name prefix.</param>
            <example><c>fedora/httpd:version1.0</c> where <c>fedora/httpd</c> is the repository and <c>version1.0</c> the tag.</example>
        </member>
        <member name="P:DotNet.Testcontainers.Images.DockerImage.Repository">
            <summary>
            Gets the repository.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.DockerImage.Registry">
            <summary>
            Gets the registry.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.DockerImage.Tag">
            <summary>
            Gets the tag.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.DockerImage.Digest">
            <summary>
            Gets the digest.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.DockerImage.FullName">
            <summary>
            Gets the full image name.
            </summary>
            <remarks>
            The full image name, like "foo/bar:1.0.0" or "bar:latest" based on the components values.
            </remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerImage.GetHostname">
            <summary>
            Gets the registry hostname.
            </summary>
            <returns>The registry hostname.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerImage.MatchLatestOrNightly">
            <summary>
            Checks if the tag matches either the latest or nightly tag.
            </summary>
            <returns>True if the tag matches the latest or nightly tag, otherwise false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerImage.MatchVersion(System.Predicate{System.String})">
            <summary>
            Checks if the tag matches the specified predicate.
            </summary>
            <param name="predicate">The predicate to match the tag against.</param>
            <returns>True if the tag matches the predicate, otherwise false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Images.DockerImage.MatchVersion(System.Predicate{System.Version})">
            <summary>
            Checks if the tag matches the specified predicate.
            </summary>
            <param name="predicate">The predicate to match the tag against.</param>
            <returns>True if the tag matches the predicate, otherwise false.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Images.IFutureDockerImage">
            <summary>
            A future image instance.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.Images.IgnoreFile">
            <summary>
            Creates a Regex cache for all ignore patterns.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IgnoreFile.#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNet.Testcontainers.Images.IgnoreFile" /> class.
            <see cref="M:DotNet.Testcontainers.Images.IgnoreFile.Accepts(System.String)" /> and <see cref="M:DotNet.Testcontainers.Images.IgnoreFile.Denies(System.String)" /> files.
            </summary>
            <param name="patterns">A list of strings with ignore patterns.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IgnoreFile.Accepts(System.String)">
            <summary>
            Returns true if the file path does not match any ignore pattern.
            </summary>
            <param name="file">Path to check.</param>
            <returns>True if the file path does not match any ignore pattern, otherwise false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IgnoreFile.Denies(System.String)">
            <summary>
            Returns true if the file path matches any ignore pattern.
            </summary>
            <param name="file">Path to check.</param>
            <returns>True if the file path matches any ignore pattern, otherwise false.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Images.IImage">
            <summary>
            An image instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.IImage.Repository">
            <summary>
            Gets the repository.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.IImage.Registry">
            <summary>
            Gets the registry.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.IImage.Tag">
            <summary>
            Gets the tag.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.IImage.Digest">
            <summary>
            Gets the digest.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.IImage.FullName">
            <summary>
            Gets the full image name.
            </summary>
            <remarks>
            The full image name, like "foo/bar:1.0.0" or "bar:latest" based on the components values.
            </remarks>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IImage.GetHostname">
            <summary>
            Gets the registry hostname.
            </summary>
            <returns>The registry hostname.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IImage.MatchLatestOrNightly">
            <summary>
            Checks if the tag matches either the latest or nightly tag.
            </summary>
            <returns>True if the tag matches the latest or nightly tag, otherwise false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IImage.MatchVersion(System.Predicate{System.String})">
            <summary>
            Checks if the tag matches the specified predicate.
            </summary>
            <param name="predicate">The predicate to match the tag against.</param>
            <returns>True if the tag matches the predicate, otherwise false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Images.IImage.MatchVersion(System.Predicate{System.Version})">
            <summary>
            Checks if the tag matches the specified predicate.
            </summary>
            <param name="predicate">The predicate to match the tag against.</param>
            <returns>True if the tag matches the predicate, otherwise false.</returns>
        </member>
        <member name="T:DotNet.Testcontainers.Images.PullPolicy">
            <summary>
            Pre-configured image pull policies.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.PullPolicy.Never">
            <summary>
            Gets the policy that never pulls images.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.PullPolicy.Missing">
            <summary>
            Gets the policy that pulls missing images (not cached).
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Images.PullPolicy.Always">
            <summary>
            Gets the policy that always pulls images.
            </summary>
        </member>
        <member name="T:DotNet.Testcontainers.ConsoleLogger">
             <summary>
             An <see cref="T:Microsoft.Extensions.Logging.ILogger" /> implementation that forwards messages to the console. Not every test framework or environment supports this approach. Developers may still need to configure their own logging implementation.
             If VSTest.Console.exe loads the test adapter in a deterministic order, we can write our own test adapter and intercept the IMessageLogger instance: https://github.com/microsoft/vstest/issues/4125#issuecomment-1320880502.
             To debug the test host and runner set the environment variables VSTEST_HOST_DEBUG and VSTEST_RUNNER_DEBUG to 1. To enable VSTest logging set VSTEST_DIAG to 1 and VSTEST_DIAG_VERBOSITY to verbose.
             The following example contains the ITestExecutor implementations. It is important that the assembly ends with TestAdapter.dll.
             </summary>
             <example>
             <code>
               [FileExtension(DllFileExtension)]
               [FileExtension(ExeFileExtension)]
               [DefaultExecutorUri(ExecutorUri)]
               [ExtensionUri(ExecutorUri)]
               [Category(Category)]
               internal sealed class UssDiscovery : ITestDiscoverer, ITestExecutor
               {
                 private const string DllFileExtension = ".dll";
            
                 private const string ExeFileExtension = ".exe";
            
                 private const string ExecutorUri = "executor://testcontainers.org/v1";
            
                 private const string Category = "managed";
            
                 public void DiscoverTests(IEnumerable&lt;string&gt; sources, IDiscoveryContext discoveryContext, IMessageLogger logger, ITestCaseDiscoverySink discoverySink)
                 {
                 }
            
                 public void RunTests(IEnumerable&lt;TestCase&gt; tests, IRunContext runContext, IFrameworkHandle frameworkHandle)
                 {
                   SetLogger(frameworkHandle);
                 }
            
                 public void RunTests(IEnumerable&lt;string&gt; sources, IRunContext runContext, IFrameworkHandle frameworkHandle)
                 {
                   SetLogger(frameworkHandle);
                 }
            
                 public void Cancel()
                 {
                 }
            
                 private static void SetLogger(IMessageLogger logger)
                 {
                   // Set the TestcontainersSettings.Logger. Use a semaphore to block the test execution until the logger is set.
                 }
               }
             </code>
             </example>
        </member>
        <member name="P:DotNet.Testcontainers.ConsoleLogger.Instance">
            <summary>
            Gets the <see cref="T:DotNet.Testcontainers.ConsoleLogger" /> instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.ConsoleLogger.DebugLogLevelEnabled">
            <summary>
            Gets a value indicating whether the debug log level is enabled or not.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.ConsoleLogger.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:DotNet.Testcontainers.ConsoleLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.ConsoleLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:DotNet.Testcontainers.ConsoleLogger.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="T:DotNet.Testcontainers.Networks.INetwork">
            <summary>
            A network instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Networks.INetwork.Name">
            <summary>
            Gets the name.
            </summary>
            <exception cref="T:System.InvalidOperationException">Network has not been created.</exception>
        </member>
        <member name="T:DotNet.Testcontainers.Resource">
            <summary>
            A resource instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Resource.Disposed">
            <summary>
            Gets a value indicating whether the resource has been disposed or not.
            </summary>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.DisposeAsync">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</summary><returns>A task that represents the asynchronous dispose operation.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.Exists">
            <summary>
            Checks whether the resources exist or not.
            </summary>
            <returns>True if the resource exists; otherwise, false.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.UnsafeCreateAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the resource.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the resource has been created.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.UnsafeDeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the resource.
            </summary>
            <param name="ct">Cancellation token.</param>
            <returns>Task that completes when the resource has been deleted.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.DisposeAsyncCore">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.</summary><returns>A task that represents the asynchronous dispose operation.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.AcquireLockAsync(System.Threading.CancellationToken)">
            <summary>
            Acquires a lock to access the resource thread-safe.
            </summary>
            <returns>A <see cref="T:System.IDisposable" /> that releases the lock on <see cref="M:System.IDisposable.Dispose" />.</returns>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.ThrowIfResourceNotFound">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> when the resources was not found.
            </summary>
            <exception cref="T:System.InvalidOperationException">The resource was not found.</exception>
        </member>
        <member name="M:DotNet.Testcontainers.Resource.ThrowIfLockNotAcquired">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> when the lock is not acquired.
            </summary>
            <exception cref="T:System.InvalidOperationException">The lock is not acquired.</exception>
        </member>
        <member name="T:DotNet.Testcontainers.Volumes.IVolume">
            <summary>
            A volume instance.
            </summary>
        </member>
        <member name="P:DotNet.Testcontainers.Volumes.IVolume.Name">
            <summary>
            Gets the name.
            </summary>
            <exception cref="T:System.InvalidOperationException">Volume has not been created.</exception>
        </member>
    </members>
</doc>
